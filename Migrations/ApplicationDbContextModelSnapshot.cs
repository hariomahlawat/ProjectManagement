// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectManagement.Data;

#nullable disable

namespace ProjectManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationGranular", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ProliferationDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("SimulatorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SubmittedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Source", "ProliferationDate");

                    b.ToTable("ProliferationGranular");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationGranularYearly", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.ToView("vw_ProliferationGranularYearly", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationYearPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("SetByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SetOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Source", "Year")
                        .IsUnique()
                        .HasDatabaseName("UX_ProlifYearPref_Project_Source_Year");

                    b.ToTable("ProliferationYearPreference");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationYearly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("SubmittedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Source", "Year")
                        .HasDatabaseName("IX_ProlifYearly_Project_Source_Year");

                    b.ToTable("ProliferationYearly");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEvent", b =>
                {
                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventPhoto", "CoverPhoto")
                        .WithMany()
                        .HasForeignKey("CoverPhotoId");

                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventType", "SocialMediaEventType")
                        .WithMany("Events")
                        .HasForeignKey("SocialMediaEventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaPlatform", "SocialMediaPlatform")
                        .WithMany()
                        .HasForeignKey("SocialMediaPlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoverPhoto");

                    b.Navigation("SocialMediaEventType");

                    b.Navigation("SocialMediaPlatform");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventPhoto", b =>
                {
                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEvent", "SocialMediaEvent")
                        .WithMany("Photos")
                        .HasForeignKey("SocialMediaEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMediaEvent");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.Visit", b =>
                {
                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitPhoto", "CoverPhoto")
                        .WithMany()
                        .HasForeignKey("CoverPhotoId");

                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitType", "VisitType")
                        .WithMany("Visits")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoverPhoto");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitPhoto", b =>
                {
                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.Visit", "Visit")
                        .WithMany("Photos")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("ProjectManagement.Models.Execution.ProjectStage", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany("ProjectStages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications.Notification", b =>
                {
                    b.HasOne("ProjectManagement.Models.Notifications.NotificationDispatch", "SourceDispatch")
                        .WithMany()
                        .HasForeignKey("SourceDispatchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SourceDispatch");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications.UserProjectMute", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.PlanApprovalLog", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Plans.PlanVersion", "PlanVersion")
                        .WithMany("ApprovalLogs")
                        .HasForeignKey("PlanVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByUser");

                    b.Navigation("PlanVersion");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.PlanVersion", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "RejectedByUser")
                        .WithMany()
                        .HasForeignKey("RejectedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("OwnerUser");

                    b.Navigation("Project");

                    b.Navigation("RejectedByUser");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.ProjectPlanSnapshot", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "TakenByUser")
                        .WithMany()
                        .HasForeignKey("TakenByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TakenByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.ProjectPlanSnapshotRow", b =>
                {
                    b.HasOne("ProjectManagement.Models.Plans.ProjectPlanSnapshot", "Snapshot")
                        .WithMany("Rows")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.StagePlan", b =>
                {
                    b.HasOne("ProjectManagement.Models.Plans.PlanVersion", "PlanVersion")
                        .WithMany("StagePlans")
                        .HasForeignKey("PlanVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanVersion");
                });

            modelBuilder.Entity("ProjectManagement.Models.Project", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectCategory", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.ProjectPhoto", null)
                        .WithMany()
                        .HasForeignKey("CoverPhotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ProjectVideo", null)
                        .WithMany()
                        .HasForeignKey("FeaturedVideoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "HodUser")
                        .WithMany()
                        .HasForeignKey("HodUserId");

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "LeadPoUser")
                        .WithMany()
                        .HasForeignKey("LeadPoUserId");

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "PlanApprovedByUser")
                        .WithMany()
                        .HasForeignKey("PlanApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.LineDirectorate", "SponsoringLineDirectorate")
                        .WithMany("Projects")
                        .HasForeignKey("SponsoringLineDirectorateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.SponsoringUnit", "SponsoringUnit")
                        .WithMany("Projects")
                        .HasForeignKey("SponsoringUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.TechnicalCategory", "TechnicalCategory")
                        .WithMany("Projects")
                        .HasForeignKey("TechnicalCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("HodUser");

                    b.Navigation("LeadPoUser");

                    b.Navigation("PlanApprovedByUser");

                    b.Navigation("SponsoringLineDirectorate");

                    b.Navigation("SponsoringUnit");

                    b.Navigation("TechnicalCategory");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectAonFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectAudit", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectBenchmarkFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCategory", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectComment", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId");

                    b.HasOne("ProjectManagement.Models.ProjectComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Execution.ProjectStage", "ProjectStage")
                        .WithMany()
                        .HasForeignKey("ProjectStageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedByUser");

                    b.Navigation("EditedByUser");

                    b.Navigation("ParentComment");

                    b.Navigation("Project");

                    b.Navigation("ProjectStage");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommentAttachment", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectComment", "Comment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommentMention", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectComment", "Comment")
                        .WithMany("Mentions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommercialFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocument", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "ArchivedByUser")
                        .WithMany()
                        .HasForeignKey("ArchivedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Execution.ProjectStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ProjectTot", "Tot")
                        .WithMany()
                        .HasForeignKey("TotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchivedByUser");

                    b.Navigation("Project");

                    b.Navigation("Stage");

                    b.Navigation("Tot");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocumentRequest", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectDocument", "Document")
                        .WithOne("Request")
                        .HasForeignKey("ProjectManagement.Models.ProjectDocumentRequest", "DocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.Execution.ProjectStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ProjectTot", "Tot")
                        .WithMany()
                        .HasForeignKey("TotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Document");

                    b.Navigation("Project");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ReviewedByUser");

                    b.Navigation("Stage");

                    b.Navigation("Tot");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectIpaFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectMetaChangeRequest", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.TechnicalCategory", null)
                        .WithMany()
                        .HasForeignKey("TechnicalCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectPhoto", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany("Photos")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ProjectTot", "Tot")
                        .WithMany()
                        .HasForeignKey("TotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("Tot");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectPncFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectSowFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectSupplyOrderFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectTot", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "LastApprovedByUser")
                        .WithMany()
                        .HasForeignKey("LastApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithOne("Tot")
                        .HasForeignKey("ProjectManagement.Models.ProjectTot", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastApprovedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectTotRequest", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "DecidedByUser")
                        .WithMany()
                        .HasForeignKey("DecidedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithOne("TotRequest")
                        .HasForeignKey("ProjectManagement.Models.ProjectTotRequest", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DecidedByUser");

                    b.Navigation("Project");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectVideo", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany("Videos")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.Remark", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.RemarkAudit", b =>
                {
                    b.HasOne("ProjectManagement.Models.Remarks.Remark", "Remark")
                        .WithMany("AuditEntries")
                        .HasForeignKey("RemarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remark");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.RemarkMention", b =>
                {
                    b.HasOne("ProjectManagement.Models.Remarks.Remark", "Remark")
                        .WithMany("Mentions")
                        .HasForeignKey("RemarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.Scheduling.ProjectPlanDuration", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.Scheduling.ProjectScheduleSettings", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithOne()
                        .HasForeignKey("ProjectManagement.Models.Scheduling.ProjectScheduleSettings", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistAudit", b =>
                {
                    b.HasOne("ProjectManagement.Models.Stages.StageChecklistItemTemplate", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.Stages.StageChecklistTemplate", "Template")
                        .WithMany("AuditEntries")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistItemTemplate", b =>
                {
                    b.HasOne("ProjectManagement.Models.Stages.StageChecklistTemplate", "Template")
                        .WithMany("Items")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Template");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistTemplate", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.TechnicalCategory", b =>
                {
                    b.HasOne("ProjectManagement.Models.TechnicalCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ProjectManagement.Models.WorkflowStatus", b =>
                {
                    b.HasOne("ProjectManagement.Models.Status", "Status")
                        .WithMany("WorkflowStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.Workflow", "Workflow")
                        .WithMany("Statuses")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEvent", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.Visit", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitType", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("ProjectManagement.Models.LineDirectorate", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.PlanVersion", b =>
                {
                    b.Navigation("ApprovalLogs");

                    b.Navigation("StagePlans");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.ProjectPlanSnapshot", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ProjectManagement.Models.Project", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("ProjectStages");

                    b.Navigation("Tot");

                    b.Navigation("TotRequest");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectComment", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Mentions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocument", b =>
                {
                    b.Navigation("Request");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.Remark", b =>
                {
                    b.Navigation("AuditEntries");

                    b.Navigation("Mentions");
                });

            modelBuilder.Entity("ProjectManagement.Models.SponsoringUnit", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistTemplate", b =>
                {
                    b.Navigation("AuditEntries");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("ProjectManagement.Models.Status", b =>
                {
                    b.Navigation("WorkflowStatuses");
                });

            modelBuilder.Entity("ProjectManagement.Models.TechnicalCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Workflow", b =>
                {
                    b.Navigation("Statuses");
                });
#pragma warning restore 612, 618
        }
    }
}
