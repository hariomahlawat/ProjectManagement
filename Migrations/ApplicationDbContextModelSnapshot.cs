// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectManagement.Data;

#nullable disable

namespace ProjectManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationGranular", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Granularity")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<string>("PeriodLabel")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Year")
                        .HasDatabaseName("IX_ProliferationGranular_ProjectId_Year");

                    b.HasIndex("ProjectId", "Source", "Year", "Granularity", "Period")
                        .HasDatabaseName("IX_ProliferationGranular_Project_Source_Period");

                    b.ToTable("ProliferationGranularEntries");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationGranularYearly", b =>
                {
                    b.Property<long?>("DirectBeneficiaries")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectBeneficiaries");

                    b.Property<long?>("IndirectBeneficiaries")
                        .HasColumnType("bigint")
                        .HasColumnName("IndirectBeneficiaries");

                    b.Property<decimal?>("InvestmentValue")
                        .HasColumnType("numeric")
                        .HasColumnName("InvestmentValue");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_ProliferationGranularYearly", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationYearPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectId", "Source", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UX_ProliferationYearPreference_Project_Source_User");

                    b.ToTable("ProliferationYearPreferences");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationYearly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_ProliferationYearly_ProjectId");

                    b.HasIndex("ProjectId", "Source", "Year")
                        .IsUnique()
                        .HasDatabaseName("UX_ProliferationYearly_Project_Source_Year");

                    b.ToTable("ProliferationYearlies");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoverPhotoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateOnly>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("SocialMediaEventTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SocialMediaPlatformId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CoverPhotoId");

                    b.HasIndex("DateOfEvent")
                        .HasDatabaseName("IX_SocialMediaEvents_DateOfEvent");

                    b.HasIndex("SocialMediaEventTypeId")
                        .HasDatabaseName("IX_SocialMediaEvents_SocialMediaEventTypeId");

                    b.HasIndex("SocialMediaPlatformId")
                        .HasDatabaseName("IX_SocialMediaEvents_SocialMediaPlatformId");

                    b.ToTable("SocialMediaEvents", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCover")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("SocialMediaEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasDefaultValue("");

                    b.Property<string>("VersionStamp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaEventId", "CreatedAtUtc")
                        .HasDatabaseName("IX_SocialMediaEventPhotos_EventId_CreatedAtUtc");

                    b.HasIndex("SocialMediaEventId", "IsCover")
                        .IsUnique()
                        .HasDatabaseName("UX_SocialMediaEventPhotos_IsCover")
                        .HasFilter("\"IsCover\" = TRUE");

                    b.ToTable("SocialMediaEventPhotos", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SocialMediaEventTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ddf8646-7070-4f7a-9fa0-8cb19f4a0d5b"),
                            CreatedAtUtc = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedByUserId = "system",
                            Description = "Coverage for new campaign announcements and kick-off posts.",
                            IsActive = true,
                            Name = "Campaign Launch",
                            RowVersion = new byte[] { 245, 68, 156, 111, 242, 153, 246, 71, 148, 115, 208, 182, 163, 36, 184, 37 }
                        },
                        new
                        {
                            Id = new Guid("fa2f60fa-7d4f-4f60-a84b-e8f64dce0b73"),
                            CreatedAtUtc = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedByUserId = "system",
                            Description = "Highlights of major delivery milestones shared online.",
                            IsActive = true,
                            Name = "Milestone Update",
                            RowVersion = new byte[] { 40, 230, 184, 11, 72, 157, 218, 71, 147, 5, 43, 110, 111, 141, 165, 198 }
                        },
                        new
                        {
                            Id = new Guid("0b35f77a-4ef6-4a0a-85f9-9fa0b1b0c353"),
                            CreatedAtUtc = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedByUserId = "system",
                            Description = "Stories focused on community outreach and engagement.",
                            IsActive = true,
                            Name = "Community Engagement",
                            RowVersion = new byte[] { 156, 101, 26, 107, 203, 244, 144, 76, 138, 54, 143, 246, 185, 53, 94, 125 }
                        });
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaPlatform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SocialMediaPlatforms", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoverPhotoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateOnly>("DateOfVisit")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<Guid>("VisitTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CoverPhotoId");

                    b.HasIndex("DateOfVisit")
                        .HasDatabaseName("IX_Visits_DateOfVisit");

                    b.HasIndex("VisitTypeId")
                        .HasDatabaseName("IX_Visits_VisitTypeId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("VersionStamp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("VisitId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VisitId", "CreatedAtUtc")
                        .HasDatabaseName("IX_VisitPhotos_VisitId_CreatedAtUtc");

                    b.ToTable("VisitPhotos");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VisitTypes");
                });

            modelBuilder.Entity("ProjectManagement.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletionRequestedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletionRequestedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisabledByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DisabledUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<bool>("PendingDeletion")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("ShowCelebrationsInCalendar")
                        .HasColumnType("boolean");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Models.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("DataJson")
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Message")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("TimeUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("Ip");

                    b.HasIndex("Level");

                    b.HasIndex("TimeUtc");

                    b.HasIndex("UserId");

                    b.HasIndex("UserName");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ProjectManagement.Models.AuthEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Event", "WhenUtc");

                    b.ToTable("AuthEvents");
                });

            modelBuilder.Entity("ProjectManagement.Models.Celebration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Day")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("EventType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Month")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("SpouseName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTimeOffset>("UpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DeletedUtc")
                        .HasFilter("\"DeletedUtc\" IS NULL");

                    b.HasIndex("EventType", "Month", "Day");

                    b.ToTable("Celebrations");
                });

            modelBuilder.Entity("ProjectManagement.Models.DailyLoginStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("DailyLoginStats");
                });

            modelBuilder.Entity("ProjectManagement.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("RecurrenceExDates")
                        .HasColumnType("text");

                    b.Property<string>("RecurrenceRule")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset?>("RecurrenceUntilUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("EndUtc");

                    b.HasIndex("StartUtc");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ProjectManagement.Models.Execution.ProjectStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ActualStart")
                        .HasColumnType("date");

                    b.Property<string>("AutoCompletedFromCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateOnly?>("CompletedOn")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ForecastDue")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ForecastStart")
                        .HasColumnType("date");

                    b.Property<bool>("IsAutoCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("PlannedDue")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PlannedStart")
                        .HasColumnType("date");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresBackfill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "StageCode")
                        .IsUnique();

                    b.ToTable("ProjectStages", null, t =>
                        {
                            t.HasCheckConstraint("CK_ProjectStages_CompletedHasDate", "\"Status\" <> 'Completed' OR (\"CompletedOn\" IS NOT NULL AND \"ActualStart\" IS NOT NULL) OR \"RequiresBackfill\" IS TRUE");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.LineDirectorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LineDirectorates");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActorUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("EventType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Fingerprint")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Module")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReadUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RecipientUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Route")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ScopeId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ScopeType")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("SeenUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SourceDispatchId")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Fingerprint")
                        .HasFilter("\"Fingerprint\" IS NOT NULL");

                    b.HasIndex("SourceDispatchId");

                    b.HasIndex("RecipientUserId", "CreatedUtc");

                    b.HasIndex("RecipientUserId", "ReadUtc", "CreatedUtc");

                    b.HasIndex("RecipientUserId", "SeenUtc", "CreatedUtc");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications.NotificationDispatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActorUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DispatchedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EventType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Fingerprint")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("LockedUntilUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Module")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Route")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ScopeId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ScopeType")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DispatchedUtc");

                    b.HasIndex("Fingerprint");

                    b.HasIndex("ActorUserId", "DispatchedUtc");

                    b.HasIndex("ProjectId", "DispatchedUtc");

                    b.HasIndex("Module", "EventType", "DispatchedUtc");

                    b.HasIndex("RecipientUserId", "Kind", "DispatchedUtc");

                    b.HasIndex("ScopeType", "ScopeId", "DispatchedUtc");

                    b.ToTable("NotificationDispatches");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications.UserNotificationPreference", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<bool>("Allow")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "Kind");

                    b.ToTable("UserNotificationPreferences");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications.UserProjectMute", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjectMutes");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.PlanApprovalLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("PerformedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset>("PerformedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlanVersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PerformedByUserId");

                    b.HasIndex("PlanVersionId");

                    b.ToTable("PlanApprovalLogs");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.PlanVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AnchorDate")
                        .HasColumnType("date");

                    b.Property<string>("AnchorStageCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("ApprovedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("ApprovedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OwnerUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<bool>("PncApplicable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("RejectedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("RejectedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RejectionNote")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("SkipWeekends")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SubmittedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("SubmittedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TransitionRule")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("VersionNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RejectedByUserId");

                    b.HasIndex("SubmittedByUserId");

                    b.HasIndex("ProjectId", "OwnerUserId")
                        .IsUnique()
                        .HasFilter("\"Status\" = 'Draft' AND \"OwnerUserId\" IS NOT NULL");

                    b.HasIndex("ProjectId", "VersionNo")
                        .IsUnique();

                    b.ToTable("PlanVersions");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.ProjectPlanSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("TakenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TakenByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("TakenByUserId");

                    b.HasIndex("ProjectId", "TakenAt");

                    b.ToTable("ProjectPlanSnapshots");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.ProjectPlanSnapshotRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("PlannedDue")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PlannedStart")
                        .HasColumnType("date");

                    b.Property<int>("SnapshotId")
                        .HasColumnType("integer");

                    b.Property<string>("StageCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotId");

                    b.ToTable("ProjectPlanSnapshotRows");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.StagePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<int>("PlanVersionId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("PlannedDue")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PlannedStart")
                        .HasColumnType("date");

                    b.Property<string>("StageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("PlanVersionId", "StageCode")
                        .IsUnique();

                    b.ToTable("StagePlans");
                });

            modelBuilder.Entity("ProjectManagement.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivePlanVersionNo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ArchivedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateOnly?>("CancelledOn")
                        .HasColumnType("date");

                    b.Property<string>("CaseFileNumber")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("CompletedOn")
                        .HasColumnType("date");

                    b.Property<int?>("CompletedYear")
                        .HasColumnType("integer");

                    b.Property<int?>("CoverPhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("CoverPhotoVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("DeleteApprovedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("DeleteMethod")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("DeleteReason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("FeaturedVideoId")
                        .HasColumnType("integer");

                    b.Property<int>("FeaturedVideoVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("HodUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLegacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LeadPoUserId")
                        .HasColumnType("text");

                    b.Property<string>("LifecycleStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("PlanApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlanApprovedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int?>("SponsoringLineDirectorateId")
                        .HasColumnType("integer");

                    b.Property<int?>("SponsoringUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("TechnicalCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseFileNumber")
                        .IsUnique()
                        .HasDatabaseName("UX_Projects_CaseFileNumber")
                        .HasFilter("\"CaseFileNumber\" IS NOT NULL");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompletedYear");

                    b.HasIndex("CoverPhotoId");

                    b.HasIndex("FeaturedVideoId");

                    b.HasIndex("HodUserId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Projects_IsDeleted_Filtered")
                        .HasFilter("\"IsDeleted\" = TRUE");

                    b.HasIndex("IsLegacy");

                    b.HasIndex("LeadPoUserId");

                    b.HasIndex("LifecycleStatus");

                    b.HasIndex("Name");

                    b.HasIndex("PlanApprovedByUserId");

                    b.HasIndex("SponsoringLineDirectorateId");

                    b.HasIndex("SponsoringUnitId");

                    b.HasIndex("TechnicalCategoryId");

                    b.HasIndex("IsDeleted", "IsArchived")
                        .HasDatabaseName("IX_Projects_IsDeleted_IsArchived");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectAonFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AonCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAonFacts", t =>
                        {
                            t.HasCheckConstraint("ck_aonfact_amount", "\"AonCost\" >= 0");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("MetadataJson")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTimeOffset>("PerformedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("PerformedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("PerformedByUserId");

                    b.HasIndex("ProjectId", "PerformedAt")
                        .HasDatabaseName("IX_ProjectAudit_ProjectId_PerformedAt");

                    b.ToTable("ProjectAudits");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectBenchmarkFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BenchmarkCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectBenchmarkFacts", t =>
                        {
                            t.HasCheckConstraint("ck_bmfact_amount", "\"BenchmarkCost\" >= 0");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ParentId", "Name")
                        .IsUnique();

                    b.ToTable("ProjectCategories");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EditedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<bool>("Pinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectStageId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("ProjectStageId");

                    b.HasIndex("ProjectId", "CreatedOn");

                    b.ToTable("ProjectComments");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommentAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("UploadedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("ProjectCommentAttachments");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommentMention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CommentId", "UserId")
                        .IsUnique();

                    b.ToTable("ProjectCommentMentions");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommercialFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("L1Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCommercialFacts", t =>
                        {
                            t.HasCheckConstraint("ck_l1fact_amount", "\"L1Cost\" >= 0");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ArchivedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ArchivedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FileStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequestId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("Published");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("TotId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UploadedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("UploadedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArchivedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StageId");

                    b.HasIndex("TotId");

                    b.HasIndex("UploadedByUserId");

                    b.HasIndex("ProjectId", "TotId");

                    b.HasIndex("ProjectId", "StageId", "IsArchived");

                    b.ToTable("ProjectDocuments", t =>
                        {
                            t.HasCheckConstraint("ck_projectdocuments_filesize", "\"FileSize\" >= 0");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocumentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("Upload");

                    b.Property<DateTimeOffset>("RequestedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("RequestedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("ReviewedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("ReviewerNote")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("TempStorageKey")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("TotId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasDatabaseName("ux_projectdocumentrequests_pending_document")
                        .HasFilter("\"DocumentId\" IS NOT NULL AND \"Status\" IN ('Draft', 'Submitted')");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("StageId");

                    b.HasIndex("TotId");

                    b.HasIndex("ProjectId", "Status");

                    b.HasIndex("ProjectId", "TotId");

                    b.ToTable("ProjectDocumentRequests");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectIpaFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("IpaCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectIpaFacts", t =>
                        {
                            t.HasCheckConstraint("ck_ipafact_amount", "\"IpaCost\" >= 0");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectMetaChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("DecidedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("DecidedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DecisionNote")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DecisionStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("OriginalCaseFileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("OriginalCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("OriginalRowVersion")
                        .HasMaxLength(8)
                        .HasColumnType("bytea");

                    b.Property<int?>("OriginalSponsoringLineDirectorateId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginalSponsoringUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginalTechnicalCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestNote")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("RequestedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset>("RequestedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TechnicalCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ux_projectmetachangerequests_pending")
                        .HasFilter("\"DecisionStatus\" = 'Pending'");

                    b.HasIndex("TechnicalCategoryId");

                    b.ToTable("ProjectMetaChangeRequests");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCover")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int?>("TotId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("UX_ProjectPhotos_Cover")
                        .HasFilter("\"IsCover\" = TRUE");

                    b.HasIndex("TotId");

                    b.HasIndex("ProjectId", "Ordinal")
                        .IsUnique();

                    b.HasIndex("ProjectId", "TotId");

                    b.ToTable("ProjectPhotos");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectPncFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PncCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPncFacts", t =>
                        {
                            t.HasCheckConstraint("ck_pncfact_amount", "\"PncCost\" >= 0");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectSowFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SponsoringLineDirectorate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SponsoringUnit")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSowFacts");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectSupplyOrderFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateOnly>("SupplyOrderDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSupplyOrderFacts");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectTot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CompletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("FirstProductionModelManufactured")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("FirstProductionModelManufacturedOn")
                        .HasColumnType("date");

                    b.Property<string>("LastApprovedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("LastApprovedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly?>("MetCompletedOn")
                        .HasColumnType("date");

                    b.Property<string>("MetDetails")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("StartedOn")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("LastApprovedByUserId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectTots");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectTotRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DecidedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("DecidedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DecisionState")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ProposedCompletedOn")
                        .HasColumnType("date");

                    b.Property<bool?>("ProposedFirstProductionModelManufactured")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("ProposedFirstProductionModelManufacturedOn")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ProposedMetCompletedOn")
                        .HasColumnType("date");

                    b.Property<string>("ProposedMetDetails")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateOnly?>("ProposedStartedOn")
                        .HasColumnType("date");

                    b.Property<string>("ProposedStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SubmittedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("SubmittedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DecidedByUserId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("ProjectTotRequests");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("PosterContentType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PosterStorageKey")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Ordinal")
                        .IsUnique();

                    b.ToTable("ProjectVideos");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.Remark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorRole")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AuthorUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedByRole")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastEditedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("General");

                    b.Property<string>("StageNameSnapshot")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("StageRef")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "IsDeleted", "CreatedAtUtc")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("IX_Remarks_ProjectId_IsDeleted_CreatedAtUtc");

                    b.HasIndex("ProjectId", "IsDeleted", "Scope", "CreatedAtUtc")
                        .IsDescending(false, false, false, true)
                        .HasDatabaseName("IX_Remarks_ProjectId_IsDeleted_Scope_CreatedAtUtc");

                    b.HasIndex("ProjectId", "IsDeleted", "Type", "EventDate")
                        .HasDatabaseName("IX_Remarks_ProjectId_IsDeleted_Type_EventDate");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.RemarkAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("ActionAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ActorRole")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ActorUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Meta")
                        .HasColumnType("jsonb");

                    b.Property<int>("RemarkId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotAuthorRole")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SnapshotAuthorUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("SnapshotBody")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime>("SnapshotCreatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SnapshotDeletedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SnapshotDeletedByRole")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SnapshotDeletedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateOnly>("SnapshotEventDate")
                        .HasColumnType("date");

                    b.Property<bool>("SnapshotIsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SnapshotLastEditedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SnapshotProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotScope")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("General");

                    b.Property<string>("SnapshotStageName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("SnapshotStageRef")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SnapshotType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("RemarkId");

                    b.ToTable("RemarkAudits");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.RemarkMention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RemarkId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RemarkId", "UserId")
                        .IsUnique();

                    b.ToTable("RemarkMentions");
                });

            modelBuilder.Entity("ProjectManagement.Models.Scheduling.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("ProjectManagement.Models.Scheduling.ProjectPlanDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "StageCode")
                        .IsUnique();

                    b.ToTable("ProjectPlanDurations");
                });

            modelBuilder.Entity("ProjectManagement.Models.Scheduling.ProjectScheduleSettings", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("AnchorStart")
                        .HasColumnType("date");

                    b.Property<bool>("IncludeWeekends")
                        .HasColumnType("boolean");

                    b.Property<string>("NextStageStartPolicy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("NextWorkingDay");

                    b.Property<bool>("SkipHolidays")
                        .HasColumnType("boolean");

                    b.HasKey("ProjectId");

                    b.ToTable("ProjectScheduleSettings");
                });

            modelBuilder.Entity("ProjectManagement.Models.Scheduling.StageShiftLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CauseStageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("CauseType")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeltaDays")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("NewForecastDue")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("OldForecastDue")
                        .HasColumnType("date");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("StageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "StageCode", "CreatedOn");

                    b.ToTable("StageShiftLogs");
                });

            modelBuilder.Entity("ProjectManagement.Models.SponsoringUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SponsoringUnits");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTimeOffset>("At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("FromActualStart")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FromCompletedOn")
                        .HasColumnType("date");

                    b.Property<string>("FromStatus")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("StageCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateOnly?>("ToActualStart")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ToCompletedOn")
                        .HasColumnType("date");

                    b.Property<string>("ToStatus")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "StageCode", "At");

                    b.ToTable("StageChangeLogs", t =>
                        {
                            t.HasCheckConstraint("CK_StageChangeLogs_Action", "\"Action\" IN ('Requested','Approved','Rejected','DirectApply','Applied','Superseded','AutoBackfill','Backfill')");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DecidedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("DecidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DecisionNote")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DecisionStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateOnly?>("RequestedDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("RequestedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestedStatus")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("StageCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "StageCode")
                        .IsUnique()
                        .HasDatabaseName("ux_stagechangerequests_pending")
                        .HasFilter("\"DecisionStatus\" = 'Pending'");

                    b.ToTable("StageChangeRequests", t =>
                        {
                            t.HasCheckConstraint("CK_StageChangeRequests_DecisionStatus", "\"DecisionStatus\" IN ('Pending','Approved','Rejected','Superseded')");
                        });
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("PayloadJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("PerformedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset>("PerformedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TemplateId");

                    b.ToTable("StageChecklistAudits");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistItemTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("UpdatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("TemplateId", "Sequence")
                        .IsUnique();

                    b.ToTable("StageChecklistItemTemplates");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("StageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("UpdatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("Version", "StageCode")
                        .IsUnique();

                    b.ToTable("StageChecklistTemplates");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageDependencyTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DependsOnStageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("FromStageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Version", "FromStageCode", "DependsOnStageCode")
                        .IsUnique();

                    b.ToTable("StageDependencyTemplates");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("Optional")
                        .HasColumnType("boolean");

                    b.Property<string>("ParallelGroup")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Version", "Code")
                        .IsUnique();

                    b.ToTable("StageTemplates");
                });

            modelBuilder.Entity("ProjectManagement.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("ProjectManagement.Models.TechnicalCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ParentId", "Name")
                        .IsUnique();

                    b.ToTable("TechnicalCategories");
                });

            modelBuilder.Entity("ProjectManagement.Models.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DueAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Priority")
                        .HasColumnType("smallint");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<DateTimeOffset>("UpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DeletedUtc");

                    b.HasIndex("OwnerId", "OrderIndex");

                    b.HasIndex("OwnerId", "Status", "IsPinned", "DueAtUtc");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("ProjectManagement.Models.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("ProjectManagement.Models.WorkflowStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("Name", "WorkflowId")
                        .HasFilter("\"Name\" IS NOT NULL AND \"WorkflowId\" IS NOT NULL");

                    b.ToTable("WorkflowStatuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationGranular", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationMetrics", "Metrics", b1 =>
                        {
                            b1.Property<Guid>("ProliferationGranularId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("DirectBeneficiaries")
                                .HasColumnType("integer")
                                .HasColumnName("DirectBeneficiaries");

                            b1.Property<int?>("IndirectBeneficiaries")
                                .HasColumnType("integer")
                                .HasColumnName("IndirectBeneficiaries");

                            b1.Property<decimal?>("InvestmentValue")
                                .HasColumnType("numeric")
                                .HasColumnName("InvestmentValue");

                            b1.HasKey("ProliferationGranularId");

                            b1.ToTable("ProliferationGranularEntries");

                            b1.WithOwner()
                                .HasForeignKey("ProliferationGranularId");
                        });

                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationYearPreference", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationYearly", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.ProliferationMetrics", "Metrics", b1 =>
                        {
                            b1.Property<Guid>("ProliferationYearlyId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("DirectBeneficiaries")
                                .HasColumnType("integer")
                                .HasColumnName("DirectBeneficiaries");

                            b1.Property<int?>("IndirectBeneficiaries")
                                .HasColumnType("integer")
                                .HasColumnName("IndirectBeneficiaries");

                            b1.Property<decimal?>("InvestmentValue")
                                .HasColumnType("numeric")
                                .HasColumnName("InvestmentValue");

                            b1.HasKey("ProliferationYearlyId");

                            b1.ToTable("ProliferationYearlies");

                            b1.WithOwner()
                                .HasForeignKey("ProliferationYearlyId");
                        });

                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEvent", b =>
                {
                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventPhoto", "CoverPhoto")
                        .WithMany()
                        .HasForeignKey("CoverPhotoId");

                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventType", "SocialMediaEventType")
                        .WithMany("Events")
                        .HasForeignKey("SocialMediaEventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaPlatform", "SocialMediaPlatform")
                        .WithMany()
                        .HasForeignKey("SocialMediaPlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoverPhoto");

                    b.Navigation("SocialMediaEventType");

                    b.Navigation("SocialMediaPlatform");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventPhoto", b =>
                {
                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEvent", "SocialMediaEvent")
                        .WithMany("Photos")
                        .HasForeignKey("SocialMediaEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMediaEvent");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.Visit", b =>
                {
                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitPhoto", "CoverPhoto")
                        .WithMany()
                        .HasForeignKey("CoverPhotoId");

                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitType", "VisitType")
                        .WithMany("Visits")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoverPhoto");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitPhoto", b =>
                {
                    b.HasOne("ProjectManagement.Areas.ProjectOfficeReports.Domain.Visit", "Visit")
                        .WithMany("Photos")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("ProjectManagement.Models.Execution.ProjectStage", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany("ProjectStages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications.Notification", b =>
                {
                    b.HasOne("ProjectManagement.Models.Notifications.NotificationDispatch", "SourceDispatch")
                        .WithMany()
                        .HasForeignKey("SourceDispatchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SourceDispatch");
                });

            modelBuilder.Entity("ProjectManagement.Models.Notifications.UserProjectMute", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.PlanApprovalLog", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Plans.PlanVersion", "PlanVersion")
                        .WithMany("ApprovalLogs")
                        .HasForeignKey("PlanVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByUser");

                    b.Navigation("PlanVersion");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.PlanVersion", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "RejectedByUser")
                        .WithMany()
                        .HasForeignKey("RejectedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("OwnerUser");

                    b.Navigation("Project");

                    b.Navigation("RejectedByUser");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.ProjectPlanSnapshot", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "TakenByUser")
                        .WithMany()
                        .HasForeignKey("TakenByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TakenByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.ProjectPlanSnapshotRow", b =>
                {
                    b.HasOne("ProjectManagement.Models.Plans.ProjectPlanSnapshot", "Snapshot")
                        .WithMany("Rows")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.StagePlan", b =>
                {
                    b.HasOne("ProjectManagement.Models.Plans.PlanVersion", "PlanVersion")
                        .WithMany("StagePlans")
                        .HasForeignKey("PlanVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanVersion");
                });

            modelBuilder.Entity("ProjectManagement.Models.Project", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectCategory", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.ProjectPhoto", null)
                        .WithMany()
                        .HasForeignKey("CoverPhotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ProjectVideo", null)
                        .WithMany()
                        .HasForeignKey("FeaturedVideoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "HodUser")
                        .WithMany()
                        .HasForeignKey("HodUserId");

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "LeadPoUser")
                        .WithMany()
                        .HasForeignKey("LeadPoUserId");

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "PlanApprovedByUser")
                        .WithMany()
                        .HasForeignKey("PlanApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.LineDirectorate", "SponsoringLineDirectorate")
                        .WithMany("Projects")
                        .HasForeignKey("SponsoringLineDirectorateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.SponsoringUnit", "SponsoringUnit")
                        .WithMany("Projects")
                        .HasForeignKey("SponsoringUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.TechnicalCategory", "TechnicalCategory")
                        .WithMany("Projects")
                        .HasForeignKey("TechnicalCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("HodUser");

                    b.Navigation("LeadPoUser");

                    b.Navigation("PlanApprovedByUser");

                    b.Navigation("SponsoringLineDirectorate");

                    b.Navigation("SponsoringUnit");

                    b.Navigation("TechnicalCategory");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectAonFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectAudit", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectBenchmarkFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCategory", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectComment", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId");

                    b.HasOne("ProjectManagement.Models.ProjectComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Execution.ProjectStage", "ProjectStage")
                        .WithMany()
                        .HasForeignKey("ProjectStageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedByUser");

                    b.Navigation("EditedByUser");

                    b.Navigation("ParentComment");

                    b.Navigation("Project");

                    b.Navigation("ProjectStage");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommentAttachment", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectComment", "Comment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommentMention", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectComment", "Comment")
                        .WithMany("Mentions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCommercialFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocument", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "ArchivedByUser")
                        .WithMany()
                        .HasForeignKey("ArchivedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.Execution.ProjectStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ProjectTot", "Tot")
                        .WithMany()
                        .HasForeignKey("TotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchivedByUser");

                    b.Navigation("Project");

                    b.Navigation("Stage");

                    b.Navigation("Tot");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocumentRequest", b =>
                {
                    b.HasOne("ProjectManagement.Models.ProjectDocument", "Document")
                        .WithOne("Request")
                        .HasForeignKey("ProjectManagement.Models.ProjectDocumentRequest", "DocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.Execution.ProjectStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.ProjectTot", "Tot")
                        .WithMany()
                        .HasForeignKey("TotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Document");

                    b.Navigation("Project");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ReviewedByUser");

                    b.Navigation("Stage");

                    b.Navigation("Tot");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectIpaFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectMetaChangeRequest", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.TechnicalCategory", null)
                        .WithMany()
                        .HasForeignKey("TechnicalCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectPhoto", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany("Photos")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ProjectTot", "Tot")
                        .WithMany()
                        .HasForeignKey("TotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("Tot");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectPncFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectSowFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectSupplyOrderFact", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectTot", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "LastApprovedByUser")
                        .WithMany()
                        .HasForeignKey("LastApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithOne("Tot")
                        .HasForeignKey("ProjectManagement.Models.ProjectTot", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastApprovedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectTotRequest", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "DecidedByUser")
                        .WithMany()
                        .HasForeignKey("DecidedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithOne("TotRequest")
                        .HasForeignKey("ProjectManagement.Models.ProjectTotRequest", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DecidedByUser");

                    b.Navigation("Project");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectVideo", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany("Videos")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.Remark", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.RemarkAudit", b =>
                {
                    b.HasOne("ProjectManagement.Models.Remarks.Remark", "Remark")
                        .WithMany("AuditEntries")
                        .HasForeignKey("RemarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remark");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.RemarkMention", b =>
                {
                    b.HasOne("ProjectManagement.Models.Remarks.Remark", "Remark")
                        .WithMany("Mentions")
                        .HasForeignKey("RemarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Models.Scheduling.ProjectPlanDuration", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.Scheduling.ProjectScheduleSettings", b =>
                {
                    b.HasOne("ProjectManagement.Models.Project", "Project")
                        .WithOne()
                        .HasForeignKey("ProjectManagement.Models.Scheduling.ProjectScheduleSettings", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistAudit", b =>
                {
                    b.HasOne("ProjectManagement.Models.Stages.StageChecklistItemTemplate", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProjectManagement.Models.Stages.StageChecklistTemplate", "Template")
                        .WithMany("AuditEntries")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistItemTemplate", b =>
                {
                    b.HasOne("ProjectManagement.Models.Stages.StageChecklistTemplate", "Template")
                        .WithMany("Items")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Template");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistTemplate", b =>
                {
                    b.HasOne("ProjectManagement.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ProjectManagement.Models.TechnicalCategory", b =>
                {
                    b.HasOne("ProjectManagement.Models.TechnicalCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ProjectManagement.Models.WorkflowStatus", b =>
                {
                    b.HasOne("ProjectManagement.Models.Status", "Status")
                        .WithMany("WorkflowStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagement.Models.Workflow", "Workflow")
                        .WithMany("Statuses")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEvent", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.SocialMediaEventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.Visit", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("ProjectManagement.Areas.ProjectOfficeReports.Domain.VisitType", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("ProjectManagement.Models.LineDirectorate", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.PlanVersion", b =>
                {
                    b.Navigation("ApprovalLogs");

                    b.Navigation("StagePlans");
                });

            modelBuilder.Entity("ProjectManagement.Models.Plans.ProjectPlanSnapshot", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ProjectManagement.Models.Project", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("ProjectStages");

                    b.Navigation("Tot");

                    b.Navigation("TotRequest");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectComment", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Mentions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ProjectManagement.Models.ProjectDocument", b =>
                {
                    b.Navigation("Request");
                });

            modelBuilder.Entity("ProjectManagement.Models.Remarks.Remark", b =>
                {
                    b.Navigation("AuditEntries");

                    b.Navigation("Mentions");
                });

            modelBuilder.Entity("ProjectManagement.Models.SponsoringUnit", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Stages.StageChecklistTemplate", b =>
                {
                    b.Navigation("AuditEntries");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("ProjectManagement.Models.Status", b =>
                {
                    b.Navigation("WorkflowStatuses");
                });

            modelBuilder.Entity("ProjectManagement.Models.TechnicalCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Models.Workflow", b =>
                {
                    b.Navigation("Statuses");
                });
#pragma warning restore 612, 618
        }
    }
}
