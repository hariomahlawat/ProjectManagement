@page
@model ProjectManagement.Pages.Projects.IndexModel
@using System
@using System.Linq
@using System.Globalization
@using ProjectManagement.Models
@using ProjectManagement.Models.Execution
@using ProjectManagement.Models.Stages
@using ProjectManagement.Services.Projects
@using ProjectManagement.ViewModels
@{
    ViewData["Title"] = "Projects";

    var activeLifecycle = Model.LifecycleTabs.FirstOrDefault(t => t.IsActive);
    var showAdvancedFilters = Model.HasActiveFilters;

    var activeFilters = new List<string>();
    if (!string.IsNullOrWhiteSpace(Model.Query))
    {
        activeFilters.Add($"Search: \"{Model.Query}\"");
    }

    var selectedCategory = Model.CategoryOptions.FirstOrDefault(o => o.Selected && !string.IsNullOrEmpty(o.Value))?.Text;
    if (!string.IsNullOrWhiteSpace(selectedCategory))
    {
        activeFilters.Add($"Category: {selectedCategory}");
    }

    var selectedTechnicalCategory = Model.TechnicalCategoryOptions.FirstOrDefault(o => o.Selected && !string.IsNullOrEmpty(o.Value))?.Text;
    if (!string.IsNullOrWhiteSpace(selectedTechnicalCategory))
    {
        activeFilters.Add($"Technical category: {selectedTechnicalCategory}");
    }

    var selectedHod = Model.HodOptions.FirstOrDefault(o => o.Selected && !string.IsNullOrEmpty(o.Value))?.Text;
    if (!string.IsNullOrWhiteSpace(selectedHod))
    {
        activeFilters.Add($"HoD: {selectedHod}");
    }

    var selectedLeadPo = Model.LeadPoOptions.FirstOrDefault(o => o.Selected && !string.IsNullOrEmpty(o.Value))?.Text;
    if (!string.IsNullOrWhiteSpace(selectedLeadPo))
    {
        activeFilters.Add($"Project officer: {selectedLeadPo}");
    }

    var selectedCompletionYear = Model.CompletionYearOptions.FirstOrDefault(o => o.Selected && !string.IsNullOrEmpty(o.Value))?.Text;
    if (!string.IsNullOrWhiteSpace(selectedCompletionYear))
    {
        activeFilters.Add($"Completion year: {selectedCompletionYear}");
    }

    var selectedTotStatus = Model.TotStatusOptions.FirstOrDefault(o => o.Selected && !string.IsNullOrEmpty(o.Value))?.Text;
    if (!string.IsNullOrWhiteSpace(selectedTotStatus))
    {
        activeFilters.Add($"ToT status: {selectedTotStatus}");
    }

    if (Model.IncludeArchived)
    {
        activeFilters.Add("Including archived projects");
    }
}

@section Styles
{
    <link rel="stylesheet" href="~/css/projects/index.css" asp-append-version="true" />
}

<div class="projects-page-layout">
    <div class="projects-page-layout__content">
        <div class="container-xxl">
            <section class="projects-hero shadow-sm">
                <div class="projects-hero__content">
                    <div class="projects-hero__headline">
                        <h1 class="projects-hero__title">Projects</h1>
                        <p class="projects-hero__subtitle">Explore, search and curate the organisation&rsquo;s R&D initiatives.</p>
                    </div>
                    <div class="projects-hero__stats">
                        <div class="projects-stat">
                            <span class="projects-stat__label">Total projects</span>
                            <span class="projects-stat__value">@Model.TotalCount</span>
                            @{
                                var lifecycleHint = string.IsNullOrWhiteSpace(activeLifecycle?.Label)
                                    ? "All projects"
                                    : activeLifecycle!.Label;
                            }
                            <span class="projects-stat__hint">@lifecycleHint</span>
                        </div>
                        <div class="projects-stat">
                            <span class="projects-stat__label">Showing</span>
                            <span class="projects-stat__value">@(Model.TotalCount == 0 ? "0" : $"{Model.ResultsStart}â€“{Model.ResultsEnd}")</span>
                            <span class="projects-stat__hint">of @Model.TotalCount results</span>
                        </div>
                        <div class="projects-stat">
                            <span class="projects-stat__label">Active filters</span>
                            <span class="projects-stat__value">@activeFilters.Count</span>
                            <span class="projects-stat__hint">@(activeFilters.Count == 0 ? "None applied" : "Refine below")</span>
                        </div>
                    </div>
                </div>
            </section>

            <nav class="projects-tabs" aria-label="Project lifecycle filters">
                <ul class="nav nav-pills projects-tabs__list" role="tablist">
                    @foreach (var lifecycle in Model.LifecycleTabs)
                    {
                        <li class="nav-item" role="presentation">
                            <a class="nav-link projects-tabs__link @(lifecycle.IsActive ? "active" : null)"
                               asp-page="./Index"
                               asp-route-Lifecycle="@lifecycle.RouteValue"
                               asp-route-Query="@Model.Query"
                               asp-route-CategoryId="@Model.CategoryId"
                               asp-route-TechnicalCategoryId="@Model.TechnicalCategoryId"
                               asp-route-LeadPoUserId="@Model.LeadPoUserId"
                               asp-route-HodUserId="@Model.HodUserId"
                               asp-route-CompletedYear="@Model.CompletedYear"
                               asp-route-TotStatus="@(Model.TotStatus?.ToString())"
                               asp-route-IncludeArchived="@(Model.IncludeArchived ? "true" : null)"
                               role="tab">
                                <span class="projects-tabs__label">@lifecycle.Label</span>
                                <span class="projects-tabs__count">@lifecycle.Count</span>
                            </a>
                        </li>
                    }
                </ul>
            </nav>

            <form method="get" class="projects-filter shadow-sm">
                <input type="hidden" name="Lifecycle" value="@Model.Lifecycle" />
                <div class="projects-filter__primary">
                    <div class="projects-filter__search">
                        <label asp-for="Query" class="form-label">Search projects</label>
                        <div class="input-with-icon">
                            <span class="input-with-icon__icon" aria-hidden="true"><i class="bi bi-search"></i></span>
                            <input asp-for="Query" class="form-control" placeholder="Search by name, description, case file or people" />
                        </div>
                    </div>
                    <div class="projects-filter__actions">
                        <button class="btn btn-outline-secondary projects-filter__toggle" type="button" data-bs-toggle="collapse" data-bs-target="#advancedProjectFilters" aria-expanded="@showAdvancedFilters.ToString().ToLowerInvariant()" aria-controls="advancedProjectFilters">
                            <i class="bi bi-sliders" aria-hidden="true"></i>
                            <span>Advanced filters</span>
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-funnel" aria-hidden="true"></i>
                            <span>Apply</span>
                        </button>
                        @if (Model.HasActiveFilters)
                        {
                            <a asp-page="./Index"
                               asp-route-Lifecycle="@((Model.Lifecycle == ProjectLifecycleFilter.All) ? null : Model.Lifecycle.ToString())"
                               class="btn btn-link text-decoration-none projects-filter__clear">
                                <i class="bi bi-x-circle" aria-hidden="true"></i>
                                <span>Clear all</span>
                            </a>
                        }
                    </div>
                </div>

                <div class="collapse projects-filter__advanced @(showAdvancedFilters ? "show" : string.Empty)" id="advancedProjectFilters">
                    <div class="projects-filter__grid">
                        <div class="projects-filter__field">
                            <label asp-for="CategoryId" class="form-label">Category</label>
                            <select asp-for="CategoryId" class="form-select" asp-items="Model.CategoryOptions"></select>
                        </div>
                        <div class="projects-filter__field">
                            <label asp-for="TechnicalCategoryId" class="form-label">Technical category</label>
                            <select asp-for="TechnicalCategoryId" class="form-select" asp-items="Model.TechnicalCategoryOptions"></select>
                        </div>
                        <div class="projects-filter__field">
                            <label asp-for="HodUserId" class="form-label">Head of Department</label>
                            <select asp-for="HodUserId" class="form-select" asp-items="Model.HodOptions"></select>
                        </div>
                        <div class="projects-filter__field">
                            <label asp-for="LeadPoUserId" class="form-label">Project Officer</label>
                            <select asp-for="LeadPoUserId" class="form-select" asp-items="Model.LeadPoOptions"></select>
                        </div>
                        <div class="projects-filter__field">
                            <label asp-for="CompletedYear" class="form-label">Completion year</label>
                            <select asp-for="CompletedYear" class="form-select" asp-items="Model.CompletionYearOptions"></select>
                        </div>
                        <div class="projects-filter__field">
                            <label asp-for="TotStatus" class="form-label">ToT status</label>
                            <select asp-for="TotStatus" class="form-select" asp-items="Model.TotStatusOptions"></select>
                        </div>
                        <div class="projects-filter__field projects-filter__field--checkbox">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="IncludeArchived" />
                                <label class="form-check-label" for="IncludeArchived">Include archived projects</label>
                            </div>
                        </div>
                    </div>
                </div>
            </form>

            @if (activeFilters.Count > 0)
            {
                <div class="projects-active-filters shadow-sm">
                    <span class="projects-active-filters__label">Active filters</span>
                    <div class="projects-active-filters__chips">
                        @foreach (var filter in activeFilters)
                        {
                            <span class="badge rounded-pill text-bg-light">@filter</span>
                        }
                    </div>
                </div>
            }

            <div class="projects-results">
                <div class="projects-results__summary">
                    <strong>@(Model.TotalCount == 0 ? "No projects" : $"Showing {Model.ResultsStart}â€“{Model.ResultsEnd}")</strong>
                    <span class="text-muted">@((Model.TotalCount == 0 ? "matching your criteria" : $"of {Model.TotalCount} projects"))</span>
                </div>
            </div>

            @if (!Model.Projects.Any())
            {
                <div class="projects-empty-state shadow-sm">
                    <div class="projects-empty-state__icon" aria-hidden="true">
                        <i class="bi bi-inboxes"></i>
                    </div>
                    <h2 class="projects-empty-state__title">No projects match your filters</h2>
                    <p class="projects-empty-state__subtitle">Try broadening your search, clearing filters or exploring a different lifecycle tab.</p>
                </div>
            }
            else
            {
                <div class="projects-grid">
                    @foreach (var project in Model.Projects)
                    {
                        var stageSummary = FormatStageSummary(project);
                        var totStatus = FormatTotStatusShort(project);
                        string? coverPhotoUrl = null;
                        if (project.CoverPhotoId.HasValue)
                        {
                            coverPhotoUrl = Url.Page("/Projects/Photos/View", new
                            {
                                id = project.Id,
                                photoId = project.CoverPhotoId,
                                size = "sm",
                                v = project.CurrentCoverPhotoVersion ?? project.CoverPhotoVersion
                            });
                        }
                        var projectNameForMedia = string.IsNullOrWhiteSpace(project.Name)
                            ? "this project"
                            : project.Name;
                        var coverPhotoAlt = $"{projectNameForMedia} cover photo";
                        var remarkSummary = Model.RemarkSummaries.TryGetValue(project.Id, out var summary)
                            ? summary
                            : ProjectRemarkSummaryViewModel.Empty;
                        var remarkAuthor = string.IsNullOrWhiteSpace(remarkSummary.LastRemarkAuthorDisplayName)
                            ? "Unknown author"
                            : remarkSummary.LastRemarkAuthorDisplayName;
                        <article class="projects-card shadow-sm">
                            <div class="projects-card__media">
                                @if (!string.IsNullOrEmpty(coverPhotoUrl))
                                {
                                    <img class="projects-card__image" src="@coverPhotoUrl" alt="@coverPhotoAlt" />
                                }
                                else
                                {
                                    <div class="projects-card__placeholder">
                                        <i class="bi bi-image" aria-hidden="true"></i>
                                        <span class="visually-hidden">No cover photo for @projectNameForMedia</span>
                                    </div>
                                }
                            </div>
                            <div class="projects-card__body">
                                <div class="projects-card__header">
                                    <h2 class="projects-card__title">
                                        <a asp-page="/Projects/Overview"
                                           asp-route-id="@project.Id"
                                           asp-route-TechnicalCategoryId="@Model.TechnicalCategoryId">
                                            @project.Name
                                        </a>
                                    </h2>
                                    <div class="projects-card__badges">
                                        <span class="badge rounded-pill @GetLifecycleBadgeClass(project.LifecycleStatus)">
                                            @FormatLifecycleStatus(project.LifecycleStatus)
                                            @if (project.LifecycleStatus == ProjectLifecycleStatus.Completed && project.CompletedYear.HasValue)
                                            {
                                                <text> @project.CompletedYear</text>
                                            }
                                        </span>
                                        @if (project.IsArchived)
                                        {
                                            <span class="badge text-bg-secondary">Archived</span>
                                        }
                                        @if (project.Tot is { } tot && project.LifecycleStatus == ProjectLifecycleStatus.Completed)
                                        {
                                            <span class="badge text-bg-light">@FormatTotStatus(tot.Status)</span>
                                        }
                                    </div>
                                </div>
                                <div class="projects-card__info">
                                    <span class="projects-card__info-item">
                                        <i class="bi bi-diagram-3" aria-hidden="true"></i>
                                        <span>@(project.Category?.Name ?? "Uncategorised")</span>
                                    </span>
                                    <span class="projects-card__info-item">
                                        <i class="bi bi-hash" aria-hidden="true"></i>
                                        <span>@(string.IsNullOrWhiteSpace(project.CaseFileNumber) ? "No case file" : project.CaseFileNumber)</span>
                                    </span>
                                    <span class="projects-card__info-item">
                                        <i class="bi bi-person" aria-hidden="true"></i>
                                        <span>@(project.LeadPoUser?.FullName ?? project.LeadPoUser?.UserName ?? "Project officer not assigned")</span>
                                    </span>
                                </div>
                                <div class="projects-card__status-line">
                                    @if (!string.IsNullOrWhiteSpace(stageSummary))
                                    {
                                        <span class="projects-card__status-item">
                                            <i class="bi bi-check2-circle" aria-hidden="true"></i>
                                            <span>@stageSummary</span>
                                        </span>
                                    }
                                    @if (project.LifecycleStatus == ProjectLifecycleStatus.Completed && !string.IsNullOrWhiteSpace(totStatus))
                                    {
                                        <span class="projects-card__status-item">
                                            <i class="bi bi-arrow-left-right" aria-hidden="true"></i>
                                            <span>@totStatus</span>
                                        </span>
                                    }
                                </div>
                                <div class="projects-card__remark">
                                    <div class="projects-card__remark-label">
                                        <i class="bi bi-chat-text" aria-hidden="true"></i>
                                        <span>Last remark</span>
                                    </div>
                                    @if (remarkSummary.HasRemarks && !string.IsNullOrWhiteSpace(remarkSummary.LastRemarkPreview))
                                    {
                                        <p class="projects-card__remark-text">@remarkSummary.LastRemarkPreview</p>
                                    }
                                    else if (remarkSummary.HasRemarks)
                                    {
                                        <p class="projects-card__remark-text">Remark available</p>
                                    }
                                    else
                                    {
                                        <p class="projects-card__remark-empty">No remarks yet</p>
                                    }
                                    @if (remarkSummary.HasRemarks)
                                    {
                                        <div class="projects-card__remark-meta">by @remarkAuthor</div>
                                    }
                                </div>
                            </div>
                        </article>
                    }
                </div>

                @if (Model.TotalPages > 1)
                {
                    <nav class="projects-pagination" aria-label="Project pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(Model.CurrentPage <= 1 ? "disabled" : null)">
                                <a class="page-link"
                                   asp-page="./Index"
                                   asp-route-p="@(Model.CurrentPage - 1)"
                                   asp-route-PageSize="@Model.PageSize"
                                   asp-route-Query="@Model.Query"
                                   asp-route-CategoryId="@Model.CategoryId"
                                   asp-route-TechnicalCategoryId="@Model.TechnicalCategoryId"
                                   asp-route-LeadPoUserId="@Model.LeadPoUserId"
                                   asp-route-HodUserId="@Model.HodUserId"
                                   asp-route-Lifecycle="@((Model.Lifecycle == ProjectLifecycleFilter.All) ? null : Model.Lifecycle.ToString())"
                                   asp-route-CompletedYear="@Model.CompletedYear"
                                   asp-route-TotStatus="@(Model.TotStatus?.ToString())"
                                   asp-route-IncludeArchived="@(Model.IncludeArchived ? "true" : null)"
                                   aria-label="Previous"
                                   aria-disabled="@(Model.CurrentPage <= 1)">
                                    <i class="bi bi-chevron-left" aria-hidden="true"></i>
                                </a>
                            </li>
                            @for (var i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : null)">
                                    <a class="page-link"
                                       asp-page="./Index"
                                       asp-route-p="@i"
                                       asp-route-PageSize="@Model.PageSize"
                                       asp-route-Query="@Model.Query"
                                       asp-route-CategoryId="@Model.CategoryId"
                                       asp-route-TechnicalCategoryId="@Model.TechnicalCategoryId"
                                       asp-route-LeadPoUserId="@Model.LeadPoUserId"
                                       asp-route-HodUserId="@Model.HodUserId"
                                       asp-route-Lifecycle="@((Model.Lifecycle == ProjectLifecycleFilter.All) ? null : Model.Lifecycle.ToString())"
                                       asp-route-CompletedYear="@Model.CompletedYear"
                                       asp-route-TotStatus="@(Model.TotStatus?.ToString())"
                                       asp-route-IncludeArchived="@(Model.IncludeArchived ? "true" : null)">@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.CurrentPage >= Model.TotalPages ? "disabled" : null)">
                                <a class="page-link"
                                   asp-page="./Index"
                                   asp-route-p="@(Model.CurrentPage + 1)"
                                   asp-route-PageSize="@Model.PageSize"
                                   asp-route-Query="@Model.Query"
                                   asp-route-CategoryId="@Model.CategoryId"
                                   asp-route-TechnicalCategoryId="@Model.TechnicalCategoryId"
                                   asp-route-LeadPoUserId="@Model.LeadPoUserId"
                                   asp-route-HodUserId="@Model.HodUserId"
                                   asp-route-Lifecycle="@((Model.Lifecycle == ProjectLifecycleFilter.All) ? null : Model.Lifecycle.ToString())"
                                   asp-route-CompletedYear="@Model.CompletedYear"
                                   asp-route-TotStatus="@(Model.TotStatus?.ToString())"
                                   asp-route-IncludeArchived="@(Model.IncludeArchived ? "true" : null)"
                                   aria-label="Next"
                                   aria-disabled="@(Model.CurrentPage >= Model.TotalPages)">
                                    <i class="bi bi-chevron-right" aria-hidden="true"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
    @if (User.IsInRole("Admin") || User.IsInRole("HoD"))
    {
        <div class="projects-create-action">
            <a asp-page="/Projects/Create" class="projects-create-action__button" aria-label="Create project">
                <i class="bi bi-plus-lg" aria-hidden="true"></i>
            </a>
        </div>
    }
</div>

@functions
{
    private static string? FormatStageSummary(Project project)
    {
        static string FmtDate(DateOnly? d) => d.HasValue ? d.Value.ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "";

        if (project.ProjectStages is not { Count: > 0 })
            return "No stages defined";

        var stages = project.ProjectStages
            .Where(s => !IsTotStage(s.StageCode))
            .OrderBy(s => s.SortOrder)
            .ToList();

        if (stages.Count == 0)
            return "No stages defined";

        var paymentStage = stages.FirstOrDefault(s => IsPaymentStage(s.StageCode));
        if (paymentStage is not null)
        {
            var cutoff = paymentStage.SortOrder;
            stages = stages.Where(s => s.SortOrder <= cutoff).ToList();
        }

        var topCompleted = stages
            .Where(s => s.Status == StageStatus.Completed)
            .OrderByDescending(s => s.SortOrder)
            .ThenByDescending(s => s.CompletedOn ?? DateOnly.MinValue)
            .FirstOrDefault();

        var started = stages.FirstOrDefault(s => s.Status is StageStatus.InProgress or StageStatus.Blocked);

        var missed = topCompleted is null
            ? Array.Empty<string>()
            : stages
                .Where(s => s.SortOrder < topCompleted.SortOrder && s.Status != StageStatus.Completed)
                .Select(s => StageCodes.DisplayNameOf(s.StageCode))
                .ToArray();

        if (started is not null)
        {
            var prevCompleted = stages
                .LastOrDefault(s => s.SortOrder < started.SortOrder && s.Status == StageStatus.Completed);

            var prevLabel = prevCompleted is null ? null : StageCodes.DisplayNameOf(prevCompleted.StageCode);
            var prevDate = prevCompleted is null ? "" : FmtDate(prevCompleted.CompletedOn);
            var nowLabel = StageCodes.DisplayNameOf(started.StageCode);
            var nowState = started.Status == StageStatus.Blocked ? "Blocked" : "In progress";
            var missedPart = missed.Length > 0 ? $" â€” missed: {string.Join(", ", missed)}" : string.Empty;

            if (prevLabel is null)
                return $"Now: {nowLabel} ({nowState}){missedPart}";

            var prevPart = string.IsNullOrEmpty(prevDate) ? prevLabel : $"{prevLabel} ({prevDate})";
            return $"Last completed: {prevPart} Â· Now: {nowLabel} ({nowState}){missedPart}";
        }

        if (topCompleted is not null)
        {
            var topLabel = StageCodes.DisplayNameOf(topCompleted.StageCode);
            var topDate = FmtDate(topCompleted.CompletedOn);
            var topPart = string.IsNullOrEmpty(topDate) ? topLabel : $"{topLabel} ({topDate})";

            var next = stages.FirstOrDefault(s => s.SortOrder > topCompleted.SortOrder);
            string nextPart = string.Empty;
            if (next is not null)
            {
                var nextLabel = StageCodes.DisplayNameOf(next.StageCode);
                var suffix = next.Status switch
                {
                    StageStatus.InProgress => " (Started)",
                    StageStatus.Blocked => " (Blocked)",
                    _ => " (Not started)"
                };
                nextPart = $" Â· Next: {nextLabel}{suffix}";
            }

            var missedPart = missed.Length > 0 ? $" â€” missed: {string.Join(", ", missed)}" : string.Empty;
            return $"Last completed: {topPart}{nextPart}{missedPart}";
        }

        var firstDefined = stages.FirstOrDefault();
        return firstDefined is null
            ? null
            : $"Not started Â· First stage: {StageCodes.DisplayNameOf(firstDefined.StageCode)}";
    }

    private static bool IsTotStage(string code) => StageCodes.IsTot(code);
    private static bool IsPaymentStage(string code) => StageCodes.IsPayment(code);

    private static string? FormatTotStatusShort(Project project)
    {
        if (project.Tot is not { } tot)
        {
            return null;
        }

        return tot.Status switch
        {
            ProjectTotStatus.NotRequired => "ToT not required",
            ProjectTotStatus.NotStarted => "ToT not started",
            ProjectTotStatus.InProgress => "ToT in progress",
            ProjectTotStatus.Completed => "ToT completed",
            _ => null
        };
    }

    private static string FormatLifecycleStatus(ProjectLifecycleStatus status)
    {
        return status switch
        {
            ProjectLifecycleStatus.Active => "Active",
            ProjectLifecycleStatus.Completed => "Completed",
            ProjectLifecycleStatus.Cancelled => "Cancelled",
            _ => status.ToString()
        };
    }

    private static string GetLifecycleBadgeClass(ProjectLifecycleStatus status) => status switch
    {
        ProjectLifecycleStatus.Active => "text-bg-primary",
        ProjectLifecycleStatus.Completed => "text-bg-success",
        ProjectLifecycleStatus.Cancelled => "text-bg-secondary",
        _ => "text-bg-secondary"
    };

    private static string FormatTotStatus(ProjectTotStatus status)
    {
        return status switch
        {
            ProjectTotStatus.NotRequired => "ToT not required",
            ProjectTotStatus.NotStarted => "ToT not started",
            ProjectTotStatus.InProgress => "ToT in progress",
            ProjectTotStatus.Completed => "ToT completed",
            _ => status.ToString()
        };
    }

}
