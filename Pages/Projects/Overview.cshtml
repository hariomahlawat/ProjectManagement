@page "{id:int}"
@using System
@using ProjectManagement.Models
@using ProjectManagement.Models.Plans
@using ProjectManagement.ViewModels
@model ProjectManagement.Pages.Projects.OverviewModel
@{
    var project = Model.Project;
    var pageTitle = project?.Name ?? "Project";
    var isAdmin = User.IsInRole("Admin");
    var isHoD = User.IsInRole("HoD");
    var isProjectOfficer = User.IsInRole("Project Officer");
    var isThisProjectsPo = isProjectOfficer &&
        string.Equals(Model.Project?.LeadPoUserId, Model.CurrentUserId, StringComparison.Ordinal);
    var planState = Model.PlanEdit?.State ?? new PlanEditorStateVm();
    var planLocked = planState.IsLocked;
    var canEditTimeline = (isAdmin || isThisProjectsPo) && !Model.Timeline.PlanPendingApproval && !planLocked;
    var completedStages = Model.Timeline.CompletedCount;
    var totalStages = Model.Timeline.TotalStages;
    var progressPercent = totalStages == 0 ? 0 : (completedStages * 100 / totalStages);
    ViewData["Title"] = pageTitle;
}

<div class="container-xxl">
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-page="/Projects/Index">Projects</a></li>
            <li class="breadcrumb-item active" aria-current="page">Overview</li>
        </ol>
    </nav>

    <div class="d-flex flex-column flex-md-row align-items-md-center justify-content-between mb-3 gap-3">
        <div>
            <h1 class="h3 mb-1">
                @pageTitle
                @if (!string.IsNullOrWhiteSpace(project?.CaseFileNumber))
                {
                    <small class="text-muted">(@project?.CaseFileNumber)</small>
                }
            </h1>
            <div class="text-muted">Created on @(project is { } p ? p.CreatedAt.ToString("dd MMM yyyy") : "—")</div>
        </div>
        <partial name="_AssignRolesOffcanvas" model="Model.AssignRoles" />
    </div>

    @if (TempData["OpenOffcanvas"] as string == "procurement")
    {
        <div id="open-procurement" data-open="1"></div>
    }
    @if (TempData["OpenOffcanvas"] as string == "assign-roles")
    {
        <div id="open-assign-roles" data-open="1"></div>
    }
    @if (TempData["OpenOffcanvas"] as string == "plan-edit")
    {
        <div id="open-plan-edit" data-open="1"></div>
    }
    @if (TempData["OpenOffcanvas"] as string == "plan-review")
    {
        <div id="open-plan-review" data-open="1"></div>
    }
    @if (TempData["Error"] is string err)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @err
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Flash"] is string ok)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @ok
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.HasBackfill)
    {
        <div class="alert alert-warning d-flex align-items-center justify-content-between" role="alert">
            <div>
                <strong>Action needed:</strong> Some earlier stages were auto-completed and need dates or costs.
            </div>
            <a class="btn btn-sm btn-outline-warning" asp-page="/Projects/Procurement/Edit" asp-route-id="@Model.Project!.Id">Backfill now</a>
        </div>
    }

    @if (project?.HodUserId == null || project?.LeadPoUserId == null)
    {
        <div class="alert alert-warning d-flex align-items-center" role="alert">
            <div class="me-3">
                @if (project?.HodUserId == null)
                {
                    <div>Head of Department not assigned.</div>
                }
                @if (project?.LeadPoUserId == null)
                {
                    <div>Project Officer not assigned.</div>
                }
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("HoD"))
            {
                <button type="button"
                        class="btn btn-sm btn-warning"
                        data-bs-toggle="offcanvas"
                        data-bs-target="#offcanvasAssignRoles"
                        aria-controls="offcanvasAssignRoles">
                    Assign Roles
                </button>
            }
        </div>
    }

    <div class="row g-3 mb-4">
        <div class="col-lg-8 d-flex flex-column gap-3">
            <div class="card">
                <div class="card-header">Project details</div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Description</dt>
                        <dd class="col-sm-8">@(!string.IsNullOrWhiteSpace(project?.Description) ? project.Description : "—")</dd>

                        <dt class="col-sm-4">Category</dt>
                        <dd class="col-sm-8">
                            @if (Model.CategoryPath.Any())
                            {
                                <span class="badge text-bg-light">@string.Join(" › ", Model.CategoryPath.Select(c => c.Name))</span>
                            }
                            else
                            {
                                <span>—</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Head of Department</dt>
                        <dd class="col-sm-8">@DisplayUser(project?.HodUser)</dd>

                        <dt class="col-sm-4">Project Officer</dt>
                        <dd class="col-sm-8">@DisplayUser(project?.LeadPoUser)</dd>
                    </dl>
                </div>
            </div>

            <partial name="_ProjectProcurementAtAGlance" model="Model.Procurement" />

            <div class="card">
                <div class="card-header">Stage progress</div>
                <div class="card-body">
                    @if (!Model.Stages.Any())
                    {
                        <p class="mb-0 text-muted">No stage updates recorded yet.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table align-middle mb-0">
                                <thead>
                                    <tr>
                                        <th>Stage</th>
                                        <th>Status</th>
                                        <th>Completed On</th>
                                    </tr>
                                </thead>
                                <tbody>
                                @foreach (var stage in Model.Stages)
                                {
                                    <tr>
                                        <td>@stage.StageCode</td>
                                        <td>@stage.Status</td>
                                        <td>@(stage.CompletedOn?.ToString("dd MMM yyyy") ?? "—")</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-4 d-flex flex-column gap-3">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex flex-column gap-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <h5 class="mb-0">Timeline</h5>
                                <div class="d-flex align-items-center gap-2 ms-2">
                                    @if (Model.Timeline.PlanPendingApproval)
                                    {
                                        <span class="badge text-bg-warning">Draft pending approval</span>
                                    }
                                    @if (Model.HasBackfill)
                                    {
                                        <span class="badge text-bg-secondary" title="Resolve procurement backfill to proceed">Backfill required</span>
                                    }
                                    @if (project?.PlanApprovedAt is DateTimeOffset approvedAt)
                                    {
                                        <span class="badge text-bg-success">Approved on @approvedAt.ToLocalTime().ToString("dd MMM yyyy")</span>
                                    }
                                </div>
                            </div>
                            <div class="d-flex align-items-center gap-2">
                                @if (isHoD)
                                {
                                    <button class="btn btn-sm btn-outline-primary"
                                            type="button"
                                            data-bs-toggle="offcanvas"
                                            data-bs-target="#offcanvasPlanReview"
                                            aria-controls="offcanvasPlanReview">
                                        Review &amp; approve
                                    </button>
                                }
                                @if (canEditTimeline)
                                {
                                    <button class="btn btn-sm btn-outline-primary"
                                            type="button"
                                            data-bs-toggle="offcanvas"
                                            data-bs-target="#offcanvasPlanEdit"
                                            aria-controls="offcanvasPlanEdit">
                                        Edit timeline
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="d-flex flex-wrap align-items-center justify-content-between gap-2">
                            <div class="d-flex align-items-center gap-2">
                                <div class="progress" style="width: 180px" aria-label="Stages completed">
                                    <div class="progress-bar" role="progressbar"
                                         style="width:@progressPercent%"
                                         aria-valuenow="@completedStages"
                                         aria-valuemin="0"
                                         aria-valuemax="@totalStages"></div>
                                </div>
                                <span class="text-muted small">@completedStages of @totalStages</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <partial name="_ProjectTimeline" model="Model.Timeline" />
                </div>
            </div>
        </div>
    </div>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasProcurement" aria-labelledby="offcanvasProcurementLabel">
        <div class="offcanvas-header">
            <h5 id="offcanvasProcurementLabel" class="mb-0">Edit Procurement</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <partial name="Projects/Procurement/_EditFormBody" model="Model.ProcurementEdit" />
        </div>
    </div>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasPlanReview" aria-labelledby="offcanvasPlanReviewLabel">
        <div class="offcanvas-header">
            <h5 id="offcanvasPlanReviewLabel" class="mb-0">Review current plan</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            @{
                ViewBag.ProjectId = Model.Project!.Id;
                ViewBag.HasBackfill = Model.HasBackfill;
                ViewBag.PlanState = planState;
                var diffs = await Model.PlanCompare.GetDraftVsCurrentAsync(Model.Project!.Id);
                if (diffs == null || diffs.Count == 0)
                {
                    <div class="alert alert-secondary">No draft plan found to review.</div>
                    <div class="text-end">
                        <button class="btn btn-outline-secondary" type="button" data-bs-dismiss="offcanvas">Close</button>
                    </div>
                }
                else
                {
                    await Html.RenderPartialAsync("/Pages/Projects/Timeline/_ReviewPlan", diffs);
                }
            }
        </div>
    </div>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasPlanEdit" aria-labelledby="offcanvasPlanEditLabel">
        <div class="offcanvas-header">
            <h5 id="offcanvasPlanEditLabel" class="mb-0">Edit timeline plan</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <partial name="Projects/Timeline/_EditPlanForm" model="Model.PlanEdit" />
        </div>
    </div>

</div>

@section Scripts {
    <script src="~/js/projects/overview.js"></script>
}

@functions {
    private static string DisplayUser(ApplicationUser? user)
    {
        if (user is null)
        {
            return "—";
        }

        if (!string.IsNullOrWhiteSpace(user.FullName))
        {
            return user.FullName;
        }

        return user.UserName ?? "—";
    }
}
