@page "{id:int}"
@using System
@using ProjectManagement.Models
@using ProjectManagement.Models.Execution
@using ProjectManagement.Models.Plans
@using ProjectManagement.ViewModels
@model ProjectManagement.Pages.Projects.OverviewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var project = Model.Project;
    var pageTitle = project?.Name ?? "Project";
    var isAdmin = User.IsInRole("Admin");
    var isHoD = User.IsInRole("HoD");
    var isProjectOfficer = User.IsInRole("Project Officer");
    var isThisProjectsPo = isProjectOfficer &&
        string.Equals(Model.Project?.LeadPoUserId, Model.CurrentUserId, StringComparison.Ordinal);
    var isThisProjectsHod = isHoD &&
        string.Equals(Model.Project?.HodUserId, Model.CurrentUserId, StringComparison.Ordinal);
    var planState = Model.PlanEdit?.State ?? new PlanEditorStateVm();
    var planLocked = planState.IsLocked;
    var hasMyDraft = planState.HasMyDraft;
    var pendingOwnedByCurrentUser = planState.PendingOwnedByCurrentUser;
    var canEditTimeline = (isAdmin || isThisProjectsPo || isThisProjectsHod) && !planLocked;
    var submissionBlocked = planState.HasPendingSubmission && !planState.PendingOwnedByCurrentUser;
    var completedStages = Model.Timeline.CompletedCount;
    var totalStages = Model.Timeline.TotalStages;
    var progressMax = totalStages == 0 ? 1 : totalStages;
    ViewData["Title"] = pageTitle;
}

@functions
{
    private static string StageStatusLabel(string? status) => status switch
    {
        "Completed" => "Completed",
        "InProgress" => "In progress",
        "Blocked" => "Blocked",
        "Skipped" => "Skipped",
        "NotStarted" => "Not started",
        null => "Unknown",
        _ when string.IsNullOrWhiteSpace(status) => "Unknown",
        _ => status!
    };

    private static string StageStatusLabel(StageStatus status) => StageStatusLabel(status.ToString());
}

<div class="container-xxl">
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-page="/Projects/Index">Projects</a></li>
            <li class="breadcrumb-item active" aria-current="page">Overview</li>
        </ol>
    </nav>

    <div class="d-flex flex-column flex-md-row align-items-md-center justify-content-between mb-3 gap-3">
        <div>
            <h1 class="h3 mb-1">
                @pageTitle
                @if (!string.IsNullOrWhiteSpace(project?.CaseFileNumber))
                {
                    <small class="text-muted">(@project?.CaseFileNumber)</small>
                }
            </h1>
            <div class="text-muted">Created on @(project is { } p ? p.CreatedAt.ToString("dd MMM yyyy") : "—")</div>
        </div>
        <partial name="_AssignRolesOffcanvas" model="Model.AssignRoles" />
    </div>

    @if (TempData["OpenOffcanvas"] as string == "procurement")
    {
        <div id="open-procurement" data-open="1"></div>
    }
    @if (TempData["OpenOffcanvas"] as string == "assign-roles")
    {
        <div id="open-assign-roles" data-open="1"></div>
    }
    @if (TempData["OpenOffcanvas"] as string == "plan-edit")
    {
        <div id="open-plan-edit" data-open="1"></div>
    }
    @if (TempData["OpenOffcanvas"] as string == "plan-review")
    {
        <div id="open-plan-review" data-open="1"></div>
    }
    @if (TempData["Error"] is string err)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @err
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Flash"] is string ok)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @ok
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.HasBackfill)
    {
        <div class="alert alert-warning d-flex align-items-center justify-content-between" role="alert">
            <div>
                <strong>Action needed:</strong> Some earlier stages were auto-completed and need dates or costs.
            </div>
            <a class="btn btn-sm btn-outline-warning" asp-page="/Projects/Procurement/Edit" asp-route-id="@Model.Project!.Id">Backfill now</a>
        </div>
    }

    @if (project?.HodUserId == null || project?.LeadPoUserId == null)
    {
        <div class="alert alert-warning d-flex align-items-center" role="alert">
            <div class="me-3">
                @if (project?.HodUserId == null)
                {
                    <div>Head of Department not assigned.</div>
                }
                @if (project?.LeadPoUserId == null)
                {
                    <div>Project Officer not assigned.</div>
                }
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("HoD"))
            {
                <button type="button"
                        class="btn btn-sm btn-warning"
                        data-bs-toggle="offcanvas"
                        data-bs-target="#offcanvasAssignRoles"
                        aria-controls="offcanvasAssignRoles">
                    Assign Roles
                </button>
            }
        </div>
    }

    @if (planState.HasPendingSubmission)
    {
        <div class="alert alert-info d-flex align-items-center justify-content-between" role="alert">
            <div>
                @if (planState.PendingOwnedByCurrentUser)
                {
                    <strong>Your plan submission is awaiting HoD review.</strong>
                }
                else
                {
                    <strong>Timeline plan awaiting HoD review.</strong>
                }
                @if (planState.PendingSubmittedOn is DateTimeOffset pendingOn)
                {
                    <span class="ms-1">Submitted on @pendingOn.ToLocalTime().ToString("dd MMM yyyy").</span>
                }
                @if (!string.IsNullOrWhiteSpace(planState.PendingSubmittedBy))
                {
                    <span class="ms-1">Submitted by @planState.PendingSubmittedBy.</span>
                }
            </div>
            @if (isHoD)
            {
                <button class="btn btn-sm btn-primary"
                        type="button"
                        data-bs-toggle="offcanvas"
                        data-bs-target="#offcanvasPlanReview"
                        aria-controls="offcanvasPlanReview">
                    Review &amp; approve
                </button>
            }
        </div>
    }

    <div class="row g-3 mb-4">
        <div class="col-lg-8 d-flex flex-column gap-3">
            <div class="card">
                <div class="card-header">Project details</div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Description</dt>
                        <dd class="col-sm-8">@(!string.IsNullOrWhiteSpace(project?.Description) ? project.Description : "—")</dd>

                        <dt class="col-sm-4">Category</dt>
                        <dd class="col-sm-8">
                            @if (Model.CategoryPath.Any())
                            {
                                <span class="badge text-bg-light">@string.Join(" › ", Model.CategoryPath.Select(c => c.Name))</span>
                            }
                            else
                            {
                                <span>—</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Head of Department</dt>
                        <dd class="col-sm-8">@DisplayUser(project?.HodUser)</dd>

                        <dt class="col-sm-4">Project Officer</dt>
                        <dd class="col-sm-8">@DisplayUser(project?.LeadPoUser)</dd>
                    </dl>
                </div>
            </div>

            <partial name="_ProjectProcurementAtAGlance" model="Model.Procurement" />

            <div class="card">
                <div class="card-header">Stage progress</div>
                <div class="card-body">
                    @if (!Model.Stages.Any())
                    {
                        <p class="mb-0 text-muted">No stage updates recorded yet.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table align-middle mb-0">
                                <thead>
                                    <tr>
                                        <th>Stage</th>
                                        <th>Status</th>
                                        <th>Completed On</th>
                                    </tr>
                                </thead>
                                <tbody>
                                @foreach (var stage in Model.Stages)
                                {
                                    <tr>
                                        <td>@stage.StageCode</td>
                                        <td>@stage.Status</td>
                                        <td>@(stage.CompletedOn?.ToString("dd MMM yyyy") ?? "—")</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-4 d-flex flex-column gap-3">
            @if (isThisProjectsHod)
            {
                var decisionTokens = Antiforgery.GetAndStoreTokens(HttpContext);
                <div class="card" data-stage-requests-card>
                    <div class="card-header">Stage change requests</div>
                    <div class="card-body d-flex flex-column gap-3">
                        <input type="hidden" value="@decisionTokens.RequestToken" data-stage-decision-token />
                        <div class="text-muted small @(Model.Timeline.PendingRequests.Any() ? "d-none" : string.Empty)" data-stage-requests-empty>
                            No pending stage change requests.
                        </div>
                        <div class="d-flex flex-column gap-3" data-stage-decision-list>
                            @foreach (var request in Model.Timeline.PendingRequests)
                            {
                                var stageLabel = $"{request.StageCode} — {request.StageName}".Trim(' ', '—');
                                <div class="border rounded p-3" data-stage-request-item data-request-id="@request.RequestId" data-stage-code="@request.StageCode" data-stage-label="@stageLabel">
                                    <div class="d-flex justify-content-between align-items-start gap-2">
                                        <div>
                                            <div class="fw-semibold">@stageLabel</div>
                                            <div class="text-muted small">
                                                Requested by @request.RequestedBy on @request.RequestedOn.ToLocalTime().ToString("dd MMM yyyy")
                                            </div>
                                        </div>
                                        <span class="badge bg-warning text-dark">@StageStatusLabel(request.RequestedStatus)</span>
                                    </div>
                                    <dl class="row small mt-3 mb-0">
                                        <dt class="col-4">Current</dt>
                                        <dd class="col-8">@StageStatusLabel(request.CurrentStatus)</dd>
                                        <dt class="col-4">Target</dt>
                                        <dd class="col-8">
                                            @StageStatusLabel(request.RequestedStatus)
                                            @if (request.RequestedDate.HasValue)
                                            {
                                                <span>· @request.RequestedDate.Value.ToString("dd MMM yyyy")</span>
                                            }
                                        </dd>
                                        @if (!string.IsNullOrWhiteSpace(request.Note))
                                        {
                                            <dt class="col-4">PO note</dt>
                                            <dd class="col-8">@request.Note</dd>
                                        }
                                    </dl>
                                    <div class="mt-3">
                                        <label class="form-label mb-1 small" for="decision-note-@request.RequestId">Decision note <span class="text-muted">(optional)</span></label>
                                        <textarea class="form-control form-control-sm" id="decision-note-@request.RequestId" rows="2" maxlength="1024" data-stage-decision-note></textarea>
                                    </div>
                                    <div class="d-flex gap-2 mt-3">
                                        <button type="button" class="btn btn-sm btn-success" data-stage-decision="Approve">Approve</button>
                                        <button type="button" class="btn btn-sm btn-outline-danger" data-stage-decision="Reject">Reject</button>
                                    </div>
                                    <div class="text-danger small mt-2 d-none" data-stage-decision-error></div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="card">
                <div class="card-header">
                    <div class="d-flex flex-column gap-2">
                        <div class="d-flex flex-column flex-lg-row align-items-start align-items-lg-center gap-3 justify-content-lg-between">
                            <div class="d-flex flex-wrap align-items-center gap-2">
                                <h5 class="mb-0">Timeline</h5>
                                <div class="d-flex flex-wrap align-items-center gap-2 ms-lg-2 mt-2 mt-lg-0">
                                    @if (pendingOwnedByCurrentUser)
                                    {
                                        <span class="badge text-bg-warning">Submitted for approval</span>
                                    }
                                    else if (Model.Timeline.PlanPendingApproval)
                                    {
                                        <span class="badge text-bg-warning">Another submission pending</span>
                                    }
                                    else if (hasMyDraft)
                                    {
                                        <span class="badge text-bg-secondary">Draft saved (not submitted)</span>
                                    }
                                    @if (Model.HasBackfill)
                                    {
                                        <span class="badge text-bg-secondary" title="Resolve procurement backfill to proceed">Backfill required</span>
                                    }
                                    @if (project?.PlanApprovedAt is DateTimeOffset approvedAt)
                                    {
                                        <span class="badge text-bg-success">Approved on @approvedAt.ToLocalTime().ToString("dd MMM yyyy")</span>
                                    }
                                </div>
                                @if (hasMyDraft && !pendingOwnedByCurrentUser)
                                {
                                    <div class="d-flex flex-wrap align-items-center gap-2">
                                        <button class="btn btn-sm btn-outline-secondary d-inline-flex align-items-center gap-2"
                                                type="button"
                                                data-bs-toggle="offcanvas"
                                                data-bs-target="#offcanvasPlanEdit"
                                                aria-controls="offcanvasPlanEdit">
                                            <span>Your draft saved</span>
                                            @if (planState.LastSavedOn is DateTimeOffset savedOn)
                                            {
                                                <span class="text-muted">@savedOn.ToLocalTime().ToString("dd MMM HH:mm")</span>
                                            }
                                            <span class="fw-semibold">Continue editing</span>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary"
                                                type="button"
                                                data-bs-toggle="modal"
                                                data-bs-target="#discardDraftModal">
                                            Discard draft
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="d-flex flex-wrap align-items-center gap-2 justify-content-lg-end">
                                @if (planState.HasPendingSubmission && isHoD)
                                {
                                    <button class="btn btn-sm btn-outline-primary"
                                            type="button"
                                            data-bs-toggle="offcanvas"
                                            data-bs-target="#offcanvasPlanReview"
                                            aria-controls="offcanvasPlanReview">
                                        Review &amp; approve
                                    </button>
                                }
                                @if (canEditTimeline && !(hasMyDraft && !pendingOwnedByCurrentUser))
                                {
                                    <button class="btn btn-sm btn-outline-primary"
                                            type="button"
                                            data-bs-toggle="offcanvas"
                                            data-bs-target="#offcanvasPlanEdit"
                                            aria-controls="offcanvasPlanEdit">
                                        Edit timeline
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="d-flex flex-wrap align-items-center justify-content-between gap-2">
                            <div class="d-flex align-items-center gap-2">
                                <progress class="pm-progress pm-progress-slim pm-progress-fixed-180"
                                          value="@completedStages"
                                          max="@progressMax"
                                          aria-label="Stages completed">
                                </progress>
                                <span class="text-muted small">@completedStages of @totalStages</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (submissionBlocked)
                    {
                        <div class="alert alert-warning" role="status">
                            Another plan is already awaiting approval. You can keep editing your draft, but submitting is disabled until the review is complete.
                        </div>
                    }
                    @{ ViewBag.IsProjectOfficerForProject = isThisProjectsPo; }
                    <partial name="_ProjectTimeline" model="Model.Timeline" />
                </div>
            </div>
        </div>
    </div>

    <partial name="_StageDirectApplyModal" />
    <partial name="Projects/Stages/_StageRequestModal" />

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasProcurement" aria-labelledby="offcanvasProcurementLabel">
        <div class="offcanvas-header">
            <h5 id="offcanvasProcurementLabel" class="mb-0">Edit Procurement</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <partial name="Projects/Procurement/_EditFormBody" model="Model.ProcurementEdit" />
        </div>
    </div>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasPlanReview" aria-labelledby="offcanvasPlanReviewLabel">
        <div class="offcanvas-header">
            <h5 id="offcanvasPlanReviewLabel" class="mb-0">Review current plan</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            @{
                ViewBag.ProjectId = Model.Project!.Id;
                ViewBag.HasBackfill = Model.HasBackfill;
                ViewBag.PlanState = planState;
                var diffs = await Model.PlanCompare.GetDraftVsCurrentAsync(Model.Project!.Id);
                await Html.RenderPartialAsync("~/Pages/Projects/Timeline/_ReviewPlan.cshtml", diffs ?? Array.Empty<ProjectManagement.Services.Stages.PlanDiffRow>());
            }
        </div>
    </div>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasPlanEdit" aria-labelledby="offcanvasPlanEditLabel">
        <div class="offcanvas-header">
            <h5 id="offcanvasPlanEditLabel" class="mb-0">Edit timeline plan</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <partial name="Projects/Timeline/_EditPlanForm" model="Model.PlanEdit" />
        </div>
    </div>

</div>

<partial name="_PlanDiscardDraftModal" model="Model.Project.Id" />

@section Scripts {
    <script src="~/js/projects/overview.js"></script>
    <script src="~/js/projects/plan-edit.js"></script>
    <script src="~/js/projects/stages.js"></script>
}

@functions {
    private static string DisplayUser(ApplicationUser? user)
    {
        if (user is null)
        {
            return "—";
        }

        if (!string.IsNullOrWhiteSpace(user.FullName))
        {
            return user.FullName;
        }

        return user.UserName ?? "—";
    }
}
