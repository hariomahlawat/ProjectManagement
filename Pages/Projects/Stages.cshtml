@page
@model ProjectManagement.Pages.Projects.StagesModel
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using ProjectManagement.Models.Execution
@using ProjectManagement.Services
@{
    ViewData["Title"] = "Project stages";
    var ragClass = Model.ProjectRag switch
    {
        ProjectRagStatus.Red => "badge rounded-pill bg-danger-subtle text-danger border",
        ProjectRagStatus.Amber => "badge rounded-pill bg-warning-subtle text-warning border",
        _ => "badge rounded-pill bg-success-subtle text-success border"
    };
    var canManage = Model.CanManageStages;
    var manageTooltip = "Only Admin, HoD, or the assigned Lead PO can update stages.";
    var todayIso = DateOnly.FromDateTime(DateTime.Today).ToString("yyyy-MM-dd");
    var currentStage = Model.CurrentStage;
    var currentStageCode = currentStage?.Code;
    var currentStageName = currentStage?.Name ?? "All stages completed";
    var plannedStartIso = currentStage?.PlannedStart?.ToString("yyyy-MM-dd");
    var plannedDueIso = currentStage?.PlannedDue?.ToString("yyyy-MM-dd");
    int GetDays(DateOnly start, DateOnly end) => (end.ToDateTime(TimeOnly.MinValue) - start.ToDateTime(TimeOnly.MinValue)).Days + 1;
    var currentStageStart = currentStage?.ActualStart ?? currentStage?.PlannedStart;
    string? progressLabel = null;
    if (currentStage?.ActualStart is DateOnly actualStartValue)
    {
        var days = GetDays(actualStartValue, Model.Today);
        progressLabel = days switch
        {
            1 => "1 day in progress",
            _ => $"{days} days in progress"
        };
    }
    else if (currentStage != null && currentStage.Status == StageStatus.NotStarted)
    {
        progressLabel = "Not started";
    }

    string? dueLabel = null;
    if (currentStage?.PlannedDue is DateOnly dueDate)
    {
        var delta = (dueDate.ToDateTime(TimeOnly.MinValue) - Model.Today.ToDateTime(TimeOnly.MinValue)).Days;
        dueLabel = delta switch
        {
            0 => "Due today",
            < 0 => $"{Math.Abs(delta)} days overdue",
            1 => "Due in 1 day",
            _ => $"Due in {delta} days"
        };
    }

    var canCompleteCurrent = currentStage != null && currentStage.CompleteGuard.Allowed && canManage;
    var currentCompleteTitle = !canManage
        ? manageTooltip
        : currentStage?.CompleteGuard.Allowed == true ? "Mark complete" : currentStage?.CompleteGuard.Reason ?? "Stage cannot complete yet";
    var canSkipCurrent = currentStage != null && string.Equals(currentStage.Code, "PNC", StringComparison.OrdinalIgnoreCase) && currentStage.SkipGuard.Allowed && canManage;
    var skipTitle = !canManage
        ? manageTooltip
        : currentStage?.SkipGuard.Allowed == true ? "Skip PNC with reason" : currentStage?.SkipGuard.Reason ?? "PNC cannot be skipped.";

    var nextDueStage = Model.Stages
        .Where(s => s.Status != StageStatus.Completed && s.ForecastDue.HasValue)
        .OrderBy(s => s.ForecastDue)
        .FirstOrDefault()
        ?? Model.Stages
            .Where(s => s.ForecastDue.HasValue)
            .OrderBy(s => s.ForecastDue)
            .FirstOrDefault();

    var nextDueStageName = nextDueStage?.Name ?? "All stages completed";
    var nextDueDate = nextDueStage?.ForecastDue ?? nextDueStage?.PlannedDue;
    int? nextDueDelta = null;
    if (nextDueStage?.ForecastDue is { } forecastDue && nextDueStage?.PlannedDue is { } plannedDue && forecastDue != plannedDue)
    {
        nextDueDelta = forecastDue.DayNumber - plannedDue.DayNumber;
    }

    double progressPercent = 0;
    if (currentStage != null)
    {
        if (currentStage.Status is StageStatus.Completed or StageStatus.Skipped)
        {
            progressPercent = 100;
        }
        else if (currentStage.Status == StageStatus.NotStarted)
        {
            progressPercent = 0;
        }
        else if (currentStageStart.HasValue && currentStage.PlannedDue.HasValue)
        {
            var totalSpan = (currentStage.PlannedDue.Value.ToDateTime(TimeOnly.MinValue) - currentStageStart.Value.ToDateTime(TimeOnly.MinValue)).TotalDays;
            if (totalSpan > 0)
            {
                var elapsed = (Model.Today.ToDateTime(TimeOnly.MinValue) - currentStageStart.Value.ToDateTime(TimeOnly.MinValue)).TotalDays;
                var ratio = Math.Max(0, Math.Min(1, elapsed / totalSpan));
                progressPercent = ratio * 100;
            }
        }
        else
        {
            progressPercent = 50;
        }
    }

    var progressPercentLabel = (int)Math.Round(progressPercent);
    var statusText = currentStage?.Status switch
    {
        StageStatus.InProgress => "In progress",
        StageStatus.Completed => "Completed",
        StageStatus.Skipped => "Skipped",
        StageStatus.NotStarted => "Not started",
        StageStatus.Blocked => "Blocked",
        _ => currentStage?.Status.ToString()
    } ?? string.Empty;

    var missingPrereqs = Model.CurrentStagePrerequisites.Where(p => !p.Completed).ToList();
    var completedPrereqs = Model.CurrentStagePrerequisites.Where(p => p.Completed).ToList();
}

<div class="container-xxl">
    <div class="d-flex flex-column flex-lg-row justify-content-between align-items-lg-start gap-3 mb-3">
        <div>
            <div class="d-flex flex-wrap align-items-center gap-3 mb-2">
                <h1 class="h4 mb-0">@Model.ProjectName</h1>
                <span class="@ragClass">Project RAG: @Model.ProjectRag</span>
            </div>
            <div class="text-secondary small">Stage tracker</div>
        </div>
        <div class="text-lg-end">
            <div class="small text-secondary">Next due</div>
            <div class="fw-semibold">
                @nextDueStageName
                @if (nextDueDate.HasValue)
                {
                    <span class="text-body-secondary">â€” @nextDueDate?.ToString("dd MMM yyyy")</span>
                }
                @if (nextDueDelta.HasValue)
                {
                    var prefix = nextDueDelta.Value > 0 ? "+" : string.Empty;
                    <span class="badge bg-light text-dark border ms-1">@prefix@nextDueDelta.Value d</span>
                }
            </div>
        </div>
    </div>

    <div class="d-flex flex-wrap justify-content-end gap-2 mb-4">
        <div class="btn-group btn-group-sm" role="group" aria-label="Stage navigation">
            <a class="btn btn-outline-secondary" asp-page="/Projects/View" asp-route-id="@Model.ProjectId">Back to project</a>
            <a class="btn btn-outline-dark" asp-page="/Projects/Activity" asp-route-id="@Model.ProjectId" title="Comments &amp; files">Activity</a>
        </div>
    </div>

<div class="modal fade" id="completeModal" tabindex="-1" aria-hidden="true" aria-labelledby="completeModalLabel">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <form method="post" asp-page-handler="Complete" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="completeModalLabel">Mark stage complete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="id" value="@Model.ProjectId" />
                    <input type="hidden" name="stage" id="complete-stage" />
                    <p class="small text-muted mb-3" id="complete-stage-label"></p>
                    <div class="mb-3">
                        <label class="form-label" for="complete-date">Completion date</label>
                        <input class="form-control" type="date" id="complete-date" name="completionDate" value="@todayIso" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="complete-remark">Remark</label>
                        <textarea class="form-control" id="complete-remark" name="remark" rows="3" placeholder="Add a short note"></textarea>
                        <div class="form-text">Optional: this note will appear in activity.</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="complete-files">Attachments</label>
                        <input class="form-control" type="file" id="complete-files" name="files" multiple />
                        <div class="form-text">Up to @(ProjectCommentService.MaxAttachmentSizeBytes / (1024 * 1024)) MB per file.</div>
                    </div>
                    <div class="form-text">Predecessor rules will be enforced.</div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Confirm</button>
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
    </div>

@section Scripts {
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/stages-tracker.js" asp-append-version="true"></script>
}

@if (!string.IsNullOrEmpty(Model.StatusMessage))
{
    <div class="alert alert-success" role="alert">
        @Model.StatusMessage
    </div>
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @Model.ErrorMessage
    </div>
}

@await Html.PartialAsync("_StageTracker", Model.Tracker)

@if (currentStage != null)
{
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-start gap-3 mb-3">
                <div>
                    <div class="small text-secondary mb-1">@currentStageCode</div>
                    <h2 class="h5 mb-0">@currentStageName</h2>
                </div>
                <div class="d-flex flex-column align-items-md-end gap-2">
                    <span class="badge rounded-pill bg-secondary-subtle text-secondary">@statusText</span>
                    <div class="d-flex flex-wrap justify-content-md-end gap-2">
                        @if (!string.IsNullOrEmpty(progressLabel))
                        {
                            <span class="badge bg-primary-subtle text-primary fw-semibold">@progressLabel</span>
                        }
                        @if (!string.IsNullOrEmpty(dueLabel))
                        {
                            <span class="badge bg-light text-dark border">@dueLabel</span>
                        }
                    </div>
                </div>
            </div>

            <div class="row g-3 small">
                <div class="col-md-4">
                    <div class="text-secondary">Planned window</div>
                    <div>@(currentStage?.PlannedStart?.ToString("dd MMM") ?? "â€”") â€” @(currentStage?.PlannedDue?.ToString("dd MMM yyyy") ?? "â€”")</div>
                </div>
                <div class="col-md-4">
                    <div class="text-secondary">Forecast window</div>
                    <div class="fw-semibold">
                        @(currentStage?.ForecastStart?.ToString("dd MMM") ?? "â€”") â€” @(currentStage?.ForecastDue?.ToString("dd MMM yyyy") ?? "â€”")
                        @if (currentStage?.ForecastDue is { } forecast && currentStage?.PlannedDue is { } planned && forecast != planned)
                        {
                            var delta = forecast.DayNumber - planned.DayNumber;
                            var prefix = delta > 0 ? "+" : string.Empty;
                            <span class="badge bg-light text-dark border ms-1">@prefix@delta d</span>
                        }
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="text-secondary">Progress</div>
                    <div class="d-flex align-items-center gap-2">
                        <div class="progress flex-grow-1" role="progressbar" aria-label="Progress" style="height: 6px;">
                            <div class="progress-bar" style="width:@progressPercentLabel%"></div>
                        </div>
                        <span>@progressPercentLabel%</span>
                    </div>
                </div>
            </div>

            @if (missingPrereqs.Any())
            {
                <div class="alert alert-warning d-flex align-items-start gap-2 mt-3 mb-0" role="alert">
                    <i class="bi bi-exclamation-triangle"></i>
                    <div>You canâ€™t complete this until @string.Join(", ", missingPrereqs.Select(p => p.Code)) are completed.</div>
                </div>
            }

            @if (completedPrereqs.Any())
            {
                <div class="mt-3">
                    <div class="text-secondary small mb-2">Completed prerequisites</div>
                    <ul class="stage-prereqs mb-0">
                        @foreach (var prereq in completedPrereqs)
                        {
                            <li>
                                <i class="bi bi-check-circle-fill text-success"></i>
                                <span>@prereq.Code</span>
                            </li>
                        }
                    </ul>
                </div>
            }

            <div class="row g-3 mt-3 small">
                <div class="col-md-4">
                    <div class="text-secondary">Actual start</div>
                    <div>@(currentStage?.ActualStart?.ToString("dd MMM yyyy") ?? "â€”")</div>
                </div>
                <div class="col-md-4">
                    <div class="text-secondary">Planned due</div>
                    <div>@(currentStage?.PlannedDue?.ToString("dd MMM yyyy") ?? "â€”")</div>
                </div>
                <div class="col-md-4">
                    <div class="text-secondary">Forecast due</div>
                    <div>@(currentStage?.ForecastDue?.ToString("dd MMM yyyy") ?? "â€”")</div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-info mb-4">All stages are complete. Review the table below for the final record.</div>
}

<div class="row g-4">
    <div class="col-12 col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm align-middle mb-0 stage-table">
                        <thead class="text-secondary small">
                            <tr>
                                <th scope="col">Stage</th>
                                <th scope="col">Planned window</th>
                                <th scope="col">Forecast</th>
                                <th scope="col">Status</th>
                                <th scope="col">Actual start</th>
                                <th scope="col">Completed</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var stage in Model.Stages)
                        {
                            var prereqHint = Model.GetPrereqHint(stage.Code);
                            var isCurrent = !string.IsNullOrEmpty(Model.Tracker.CurrentCode) && string.Equals(stage.Code, Model.Tracker.CurrentCode, StringComparison.OrdinalIgnoreCase);
                            var statusLabel = stage.Status switch
                            {
                                StageStatus.NotStarted => "Not started",
                                StageStatus.InProgress => "In progress",
                                StageStatus.Completed => "Completed",
                                StageStatus.Skipped => "Skipped",
                                StageStatus.Blocked => "Blocked",
                                _ => stage.Status.ToString()
                            };
                            <tr data-stage-row="@stage.Code" class="@(isCurrent ? "table-active" : "dim")">
                                <th scope="row" class="align-middle">
                                    <div class="fw-semibold text-uppercase mb-1">@stage.Code</div>
                                    <div class="text-secondary small d-flex align-items-center gap-1">
                                        <span>@stage.Name</span>
                                        @if (!string.IsNullOrEmpty(prereqHint))
                                        {
                                            <span class="text-muted" title="@prereqHint">
                                                <i class="bi bi-lock" aria-hidden="true"></i>
                                                <span class="visually-hidden">Blocked: @prereqHint</span>
                                            </span>
                                        }
                                    </div>
                                </th>
                                <td>
                                    <div class="small text-secondary">@(stage.PlannedStart?.ToString("dd MMM yyyy") ?? "â€”")</div>
                                    <div class="small text-secondary">to @(stage.PlannedDue?.ToString("dd MMM yyyy") ?? "â€”")</div>
                                </td>
                                <td>
                                    <div class="fw-semibold small">@(stage.ForecastDue?.ToString("dd MMM yyyy") ?? "â€”")</div>
                                    @if (stage.PlannedDue.HasValue && stage.ForecastDue.HasValue && stage.PlannedDue.Value != stage.ForecastDue.Value)
                                    {
                                        var shift = stage.ForecastDue.Value.DayNumber - stage.PlannedDue.Value.DayNumber;
                                        var prefix = shift > 0 ? "+" : string.Empty;
                                        <span class="badge bg-light text-dark border">@prefix@shift d</span>
                                    }
                                    @if (stage.ForecastStart.HasValue)
                                    {
                                        <div class="small text-secondary">from @stage.ForecastStart?.ToString("dd MMM yyyy")</div>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark border">@statusLabel</span>
                                </td>
                                <td class="small">@stage.ActualStart?.ToString("dd MMM yyyy")</td>
                                <td class="small">@stage.CompletedOn?.ToString("dd MMM yyyy")</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-lg-4">
        <div class="d-flex flex-column gap-3">
            @if (currentStage != null)
            {
                <div class="card border-0 shadow-sm sticky-top" style="top: 1rem;">
                    <div class="card-body">
                        <div class="mb-2 small text-secondary">Current stage</div>
                        <div class="fw-semibold">@currentStage.Code â€” @currentStage.Name</div>
                        @if (!string.IsNullOrEmpty(dueLabel))
                        {
                            <div class="small text-secondary mt-1">@dueLabel</div>
                        }
                        <div class="d-grid gap-2 mt-3">
                            <button type="button"
                                    class="btn btn-primary"
                                    data-bs-toggle="modal"
                                    data-bs-target="#completeModal"
                                    data-stage="@currentStageCode"
                                    data-stage-name="@currentStageName"
                                    data-default-date="@todayIso"
                                    title="@currentCompleteTitle"
                                    disabled="@(canCompleteCurrent ? null : "disabled")">
                                Complete stage
                            </button>
                            @if (Model.CanComment && Model.CurrentStage != null)
                            {
                                <a class="btn btn-outline-secondary" href="#stage-comment-composer">Add remark</a>
                            }
                        </div>

                        @if (canSkipCurrent)
                        {
                            <div class="mt-3">
                                <div class="small text-secondary mb-2">Skip PNC</div>
                                <form method="post" asp-page-handler="Skip" asp-route-projectId="@Model.ProjectId" asp-route-stage="@currentStageCode" class="d-flex gap-2">
                                    <input type="text" name="reason" class="form-control form-control-sm" placeholder="Skip reason" required minlength="3" maxlength="200" />
                                    <button type="submit" class="btn btn-outline-secondary btn-sm" title="@skipTitle">Skip</button>
                                </form>
                            </div>
                        }
                    </div>
                </div>
            }

            @{
                var routeValues = new Dictionary<string, object?>();
                if (Model.CommentStageId.HasValue)
                {
                    routeValues["commentStageId"] = Model.CommentStageId;
                }

                var threadViewData = new ViewDataDictionary(ViewData)
                {
                    ["CommentsPage"] = "/Projects/Stages",
                    ["ProjectId"] = Model.ProjectId,
                    ["ShowStage"] = false,
                    ["RouteValues"] = routeValues,
                    ["ReplyParam"] = "commentParentId",
                    ["EditParam"] = "commentEditId",
                    ["DeleteHandler"] = "DeleteComment",
                    ["DownloadHandler"] = "DownloadAttachment"
                };
            }

            @if (currentStage != null && Model.StageComments.Any())
            {
                <div class="card border-0 shadow-sm" id="stage-comments">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h2 class="h6 mb-0">Recent remarks</h2>
                            <a class="small" asp-page="/Projects/Activity" asp-route-id="@Model.ProjectId">Open activity</a>
                        </div>
                        <p class="text-secondary small mb-3">Latest remarks for <strong>@Model.CurrentStage?.Code</strong>. Showing up to 3 items.</p>
                        @await Html.PartialAsync("_CommentThread", Model.StageComments, threadViewData)
                    </div>
                </div>
            }

            @if (Model.CanComment && Model.CurrentStage != null)
            {
                <div id="stage-comment-composer">
                    @await Html.PartialAsync("_CommentComposer", Model.CommentComposer)
                </div>
            }
        </div>
    </div>
</div>
</div>
