@using System.Linq
@using ProjectManagement.Models
@using ProjectManagement.Utilities
@model ProjectManagement.Pages.Projects.OverviewModel

@{
    var showTransferOfTechnology = Model.LifecycleSummary.Status == ProjectLifecycleStatus.Completed;
}

@if (showTransferOfTechnology)
{
    var tot = Model.TotSummary;
    var hasTot = tot.HasTotRecord;
    var badgeVariant = hasTot
        ? tot.Status switch
        {
            ProjectTotStatus.Completed => "success",
            ProjectTotStatus.InProgress => "info",
            ProjectTotStatus.NotRequired => "secondary",
            _ => "secondary"
        }
        : "secondary";
    var canManageTot = Model.CanManageTot;
    var pendingRequest = tot.PendingRequest;
    var hasPending = tot.HasPendingRequest;
    var latestRemark = tot.LatestRemark;

    <div class="card pm-card">
        <div class="card-header pm-card-header">
            <div class="pm-card-heading">
                <span class="pm-card-icon" aria-hidden="true">
                    <i class="bi bi-diagram-3"></i>
                </span>
                <div>
                    <h3 class="pm-card-title h6 mb-0">Transfer of Technology</h3>
                    <p class="pm-card-subtitle mb-0">Status and milestones.</p>
                </div>
            </div>
            <div class="pm-card-actions d-flex align-items-center gap-2">
                <span class="badge text-bg-@badgeVariant">@tot.StatusLabel</span>
                @if (canManageTot && Model.Project is { } project)
                {
                    if (hasPending)
                    {
                        <a class="btn btn-sm btn-outline-secondary disabled"
                           href="#"
                           role="button"
                           aria-disabled="true"
                           tabindex="-1">
                            Update
                        </a>
                    }
                    else
                    {
                        <a class="btn btn-sm btn-outline-secondary"
                           asp-page="/Projects/Tot/Edit"
                           asp-route-id="@project.Id">
                            Update
                        </a>
                    }

                    <a class="btn btn-sm btn-primary"
                       asp-area="ProjectOfficeReports"
                       asp-page="/Tot/Index"
                       asp-route-selectedProjectId="@project.Id">
                        Open tracker
                    </a>
                }
            </div>
        </div>
        <div class="card-body pm-card-body d-flex flex-column gap-2">
            <p class="mb-0">@tot.Summary</p>
            @if (tot.Facts.Any())
            {
                <dl class="row small mb-0">
                    @foreach (var fact in tot.Facts)
                    {
                        <dt class="col-sm-5">@fact.Label</dt>
                        <dd class="col-sm-7">@fact.Value</dd>
                    }
                </dl>
            }
            @if (latestRemark is { } remarkSnippet)
            {
                var ist = TimeZoneHelper.GetIst();
                var createdLocal = TimeZoneInfo.ConvertTimeFromUtc(DateTime.SpecifyKind(remarkSnippet.CreatedAtUtc, DateTimeKind.Utc), ist);
                <div class="border rounded p-3 bg-light small">
                    <div class="d-flex justify-content-between align-items-center gap-2">
                        <span class="fw-semibold">Latest ToT remark</span>
                        <span class="badge text-bg-secondary">@remarkSnippet.TypeLabel</span>
                    </div>
                    <div class="text-muted mt-1">Posted on @createdLocal:dd MMM yyyy HH:mm IST</div>
                    <div class="mt-2" style="white-space: pre-line;">@remarkSnippet.Body</div>
                    @if (remarkSnippet.EventDate.HasValue)
                    {
                        <div class="text-muted mt-2">Event date: @remarkSnippet.EventDate.Value:dd MMM yyyy</div>
                    }
                    <a class="btn btn-link btn-sm px-0 mt-2" href="#remarks-panel">Open remarks panel</a>
                </div>
            }
            else
            {
                <p class="text-muted small mb-0">No ToT remarks yet. <a class="link-secondary" href="#remarks-panel">Open remarks panel</a> to start the conversation.</p>
            }
            @if (hasPending && pendingRequest is { } request)
            {
                var alertVariant = request.State switch
                {
                    ProjectTotRequestDecisionState.Pending => "info",
                    ProjectTotRequestDecisionState.Approved => "success",
                    ProjectTotRequestDecisionState.Rejected => "warning",
                    _ => "secondary"
                };
                var ist = TimeZoneHelper.GetIst();
                var submittedOnLocal = TimeZoneInfo.ConvertTimeFromUtc(
                    DateTime.SpecifyKind(request.SubmittedOnUtc, DateTimeKind.Utc),
                    ist);
                DateTime? decidedOnLocal = request.DecidedOnUtc.HasValue
                    ? TimeZoneInfo.ConvertTimeFromUtc(DateTime.SpecifyKind(request.DecidedOnUtc.Value, DateTimeKind.Utc), ist)
                    : null;
                <div class="alert alert-@alertVariant mb-0" role="status">
                    <div class="fw-semibold">@request.StateLabel</div>
                    <ul class="mb-0">
                        <li>Status proposed as <strong>@request.ProposedStatusLabel</strong>@(request.ProposedStartedOn.HasValue ? $" starting {request.ProposedStartedOn.Value:dd MMM yyyy}" : string.Empty)@(request.ProposedCompletedOn.HasValue ? $" completing {request.ProposedCompletedOn.Value:dd MMM yyyy}" : string.Empty).</li>
                        @if (!string.IsNullOrWhiteSpace(request.ProposedMetDetails) || request.ProposedMetCompletedOn.HasValue)
                        {
                            var metDescription = string.IsNullOrWhiteSpace(request.ProposedMetDetails)
                                ? "MET completion"
                                : $"MET details: {request.ProposedMetDetails}";
                            var metSuffix = request.ProposedMetCompletedOn.HasValue
                                ? (string.IsNullOrWhiteSpace(request.ProposedMetDetails)
                                    ? $" on {request.ProposedMetCompletedOn.Value:dd MMM yyyy}"
                                    : $" (completed {request.ProposedMetCompletedOn.Value:dd MMM yyyy})")
                                : string.Empty;
                            <li>@metDescription@metSuffix.</li>
                        }
                        @if (request.ProposedFirstProductionModelManufactured.HasValue || request.ProposedFirstProductionModelManufacturedOn.HasValue)
                        {
                            var manufacturedLabel = request.ProposedFirstProductionModelManufactured.HasValue
                                ? (request.ProposedFirstProductionModelManufactured.Value ? "Yes" : "No")
                                : "Not specified";
                            var manufacturedSuffix = request.ProposedFirstProductionModelManufacturedOn.HasValue
                                ? $" on {request.ProposedFirstProductionModelManufacturedOn.Value:dd MMM yyyy}"
                                : string.Empty;
                            <li>First production model manufactured: <strong>@manufacturedLabel</strong>@manufacturedSuffix.</li>
                        }
                        <li>Submitted by @request.SubmittedBy on @submittedOnLocal:dd MMM yyyy HH:mm.</li>
                        @if (request.State != ProjectTotRequestDecisionState.Pending && decidedOnLocal.HasValue && !string.IsNullOrWhiteSpace(request.DecidedBy))
                        {
                            <li>Decided by @request.DecidedBy on @decidedOnLocal.Value:dd MMM yyyy HH:mm.</li>
                        }
                    </ul>
                </div>
            }
            @if (!hasTot)
            {
                <p class="text-muted small mb-0">Set up ToT tracking to capture milestones.</p>
            }
        </div>
    </div>
}
