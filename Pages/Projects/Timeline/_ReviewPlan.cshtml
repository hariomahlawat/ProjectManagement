@model IReadOnlyList<ProjectManagement.Services.Stages.PlanDiffRow>
@using System.Linq
@using ProjectManagement.Models.Plans
@using ProjectManagement.Models.Stages
@using ProjectManagement.ViewModels

@{
    var planState = ViewBag.PlanState as PlanEditorStateVm;
    var status = planState?.Status;
    var isPending = status == PlanVersionStatus.PendingApproval;
    var requiresBackfill = ViewBag.HasBackfill is bool hb && hb;
    var submittedOn = planState?.SubmittedOn;
    var submittedBy = planState?.SubmittedBy;
}

@if (Model is null || Model.Count == 0)
{
    <div class="alert alert-secondary">No draft plan found to review.</div>
    <div class="text-end">
        <button class="btn btn-outline-secondary" type="button" data-bs-dismiss="offcanvas">Close</button>
    </div>
}
else
{
    <div class="small text-muted mb-2">
        <span>Draft plan compared against the current timeline.</span>
    </div>

    if (submittedOn is DateTimeOffset submitted)
    {
        <div class="mb-2 text-muted small">Submitted on @submitted.ToLocalTime().ToString("dd MMM yyyy") @if (!string.IsNullOrWhiteSpace(submittedBy)){<text>by @submittedBy</text>}</div>
    }

    if (!isPending)
    {
        <div class="alert alert-info">No draft has been submitted for approval.</div>
    }
    else if (requiresBackfill)
    {
        <div class="alert alert-warning">Resolve required procurement backfill before approval.</div>
    }

    var hasChanges = Model.Any(row => row.NewStart != row.OldStart || row.NewDue != row.OldDue);

    @if (!hasChanges)
    {
        <div class="alert alert-info">No differences between current plan and draft. You can still approve to stamp and snapshot.</div>
    }

    <div class="table-responsive">
        <table class="table table-sm align-middle">
            <thead>
                <tr>
                    <th>Stage</th>
                    <th class="text-center">Current timeline</th>
                    <th class="text-center">Draft plan</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var row in Model)
            {
                var changed = row.OldStart != row.NewStart || row.OldDue != row.NewDue;
                <tr class="@(changed ? "table-warning" : "table-secondary")">
                    <td>
                        <span class="fw-semibold">@StageCodes.DisplayNameOf(row.StageCode)</span>
                        <div class="text-muted small">@row.StageCode</div>
                    </td>
                    <td class="text-center">
                        @((row.OldStart?.ToString("dd MMM yyyy") ?? "—") + " → " + (row.OldDue?.ToString("dd MMM yyyy") ?? "—"))
                    </td>
                    <td class="text-center">
                        @((row.NewStart?.ToString("dd MMM yyyy") ?? "—") + " → " + (row.NewDue?.ToString("dd MMM yyyy") ?? "—"))
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <form method="post"
          asp-page="/Projects/Timeline/Review"
          asp-route-id="@ViewBag.ProjectId"
          class="d-flex flex-column gap-3 mt-3"
          data-plan-review-form="true">
        @Html.AntiForgeryToken()
        <input type="hidden" name="Input.ProjectId" value="@ViewBag.ProjectId" />
        <div class="d-flex gap-2 justify-content-end">
            <button name="Input.Decision" value="Reject" class="btn btn-outline-secondary" @(isPending ? null : "disabled") data-plan-review-reject="true">Reject</button>
            <button name="Input.Decision" value="Approve" class="btn btn-primary" @((!isPending || requiresBackfill) ? "disabled" : null)>Approve plan</button>
        </div>
        <div class="mt-1" data-plan-review-note hidden>
            <label class="form-label" for="plan-review-reject-note">Reason (optional)</label>
            <textarea class="form-control" id="plan-review-reject-note" name="Input.Note" rows="3" placeholder="Share feedback for the project officer."></textarea>
        </div>
    </form>
}
