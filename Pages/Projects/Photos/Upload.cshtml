@page "/Projects/{id:int}/Photos/Upload"
@model ProjectManagement.Pages.Projects.Photos.UploadModel
@using Microsoft.Extensions.Options
@using ProjectManagement.Services.Projects
@using System
@using System.Collections.Generic
@using System.Globalization
@using System.Linq
@inject IOptions<ProjectPhotoOptions> PhotoOptions
@{
    ViewData["Title"] = "Upload Project Photo";
    var photoOptions = PhotoOptions.Value;
    var derivativeSettings = photoOptions.Derivatives;
    var coverOptions = derivativeSettings.TryGetValue("xl", out var xlOptions)
        ? xlOptions
        : new ProjectPhotoDerivativeOptions { Width = 1600, Height = 1200 };
    var largeOptions = derivativeSettings.TryGetValue("md", out var mdOptions)
        ? mdOptions
        : new ProjectPhotoDerivativeOptions { Width = 1200, Height = 900 };
    var thumbOptions = derivativeSettings.TryGetValue("sm", out var smOptions)
        ? smOptions
        : new ProjectPhotoDerivativeOptions { Width = 800, Height = 600 };

    string FormatContentType(string contentType) => contentType switch
    {
        "image/jpeg" => "JPEG",
        "image/png" => "PNG",
        "image/webp" => "WebP",
        _ when contentType.StartsWith("image/", StringComparison.OrdinalIgnoreCase)
            => contentType[6..].ToUpperInvariant(),
        _ => contentType
    };

    string ToReadableList(IReadOnlyList<string> values) => values.Count switch
    {
        0 => string.Empty,
        1 => values[0],
        2 => $"{values[0]} and {values[1]}",
        _ => $"{string.Join(", ", values.Take(values.Count - 1))}, and {values[^1]}"
    };

    string FormatFileSize(long bytes)
    {
        if (bytes <= 0)
        {
            return "0 bytes";
        }

        string[] suffixes = { "bytes", "KB", "MB", "GB" };
        double value = bytes;
        var suffixIndex = 0;

        while (value >= 1024 && suffixIndex < suffixes.Length - 1)
        {
            value /= 1024;
            suffixIndex++;
        }

        return suffixIndex == 0
            ? $"{bytes} {suffixes[suffixIndex]}"
            : FormattableString.Invariant($"{value:0.#} {suffixes[suffixIndex]}");
    }

    var allowedFormats = (photoOptions.AllowedContentTypes?.AsEnumerable() ?? Enumerable.Empty<string>())
        .Select(FormatContentType)
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(format => format)
        .ToList();
    var readableFormats = ToReadableList(allowedFormats);
    var allowedFormatsText = string.IsNullOrEmpty(readableFormats)
        ? "No formats configured"
        : readableFormats;
    var maxFileSizeText = FormatFileSize(photoOptions.MaxFileSizeBytes);
}

<h1 class="mb-4">Upload Project Photo</h1>

<form method="post" enctype="multipart/form-data" data-photo-upload-form>
    <input asp-for="Input.ProjectId" type="hidden" />
    <input asp-for="Input.RowVersion" type="hidden" />
    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

    <div class="mb-3" data-photo-upload-zone>
        <label asp-for="Input.Files" class="form-label">Photos</label>
        <div class="project-photo-drop border border-2 border-secondary-subtle rounded-3 p-4 text-center"
             data-photo-upload-drop
             tabindex="0"
             role="button"
             aria-describedby="photo-upload-help">
            <div class="fw-semibold" data-photo-upload-prompt>Drag &amp; drop photos or browse</div>
            <div class="text-muted small" data-photo-upload-status></div>
        </div>
        <input asp-for="Input.Files"
               class="form-control visually-hidden"
               type="file"
               accept="image/*"
               multiple
               data-photo-upload-input
               data-max-count="12"
               data-max-size="@photoOptions.MaxFileSizeBytes" />
        <span asp-validation-for="Input.Files" class="text-danger"></span>
        <div class="form-text" id="photo-upload-help">
            Supported formats: @allowedFormatsText.
            Minimum dimensions: @photoOptions.MinWidth &times; @photoOptions.MinHeight pixels.
            Maximum file size: @maxFileSizeText. Select one photo to enable cropping and captions.
        </div>
        <div class="photo-upload-feedback mt-3" data-photo-upload-list hidden aria-live="polite"></div>
    </div>

    <div class="mb-3">
        <label asp-for="Input.Caption" class="form-label">Caption (optional)</label>
        <textarea asp-for="Input.Caption" class="form-control" rows="3" data-photo-upload-caption></textarea>
        <span asp-validation-for="Input.Caption" class="text-danger"></span>
        <p class="text-muted small mb-0" data-photo-upload-multi-note hidden>Captions apply when a single photo is selected.</p>
    </div>

    @if (Model.Project.Tot is not null)
    {
        <div class="mb-3">
            <label class="form-label">Transfer of Technology</label>
            @if (Model.AllowTotLinking)
            {
                <div class="form-check">
                    <input asp-for="Input.LinkToTot" class="form-check-input" />
                    <label asp-for="Input.LinkToTot" class="form-check-label">Link this photo to Transfer of Technology work</label>
                </div>
                <div class="form-text">Current status: @Model.TotStatusDisplay.</div>
                <span asp-validation-for="Input.LinkToTot" class="text-danger"></span>
            }
            else
            {
                <p class="form-text mb-0">Transfer of Technology is @Model.TotStatusDisplay for this project.</p>
            }
        </div>
    }

    <div class="form-check mb-3">
        <input asp-for="Input.SetAsCover"
               class="form-check-input"
               aria-label="Set this uploaded photo as the cover image for @Model.Project.Name" />
        <label asp-for="Input.SetAsCover" class="form-check-label">Set as cover photo</label>
    </div>

    <fieldset class="border rounded p-3 mb-3">
        <legend class="float-none w-auto fs-6 px-2">Crop &amp; preview</legend>
        <p class="text-muted small project-photo-editor__fallback">JavaScript is disabled, so the photo will be centre-cropped automatically.</p>
        <div class="project-photo-editor"
             data-photo-editor
             data-photo-editor-input="#Input_Files"
             aria-describedby="project-photo-editor-placeholder project-photo-preview-helper">
            <div class="project-photo-editor__canvas">
                <img data-photo-editor-image alt="Selected photo ready for cropping" />
            </div>
            <div class="d-flex flex-column gap-3">
                <p class="text-muted mb-0 project-photo-editor__placeholder"
                   id="project-photo-editor-placeholder"
                   data-photo-editor-placeholder>Select a photo to enable cropping. The crop box is locked to a 4:3 aspect ratio and must stay completely within the photo.</p>
                <div class="project-photo-preview-grid" data-photo-editor-previews aria-describedby="project-photo-preview-helper">
                    <div class="project-photo-preview-item">
                        <div class="project-photo-preview-frame" data-photo-editor-preview="xl" data-width="@coverOptions.Width" data-height="@coverOptions.Height">
                            <img alt="Cover preview" />
                            <span class="pm-photo-cover-badge">Cover</span>
                        </div>
                        <div class="project-photo-preview-label">Cover (@coverOptions.Width × @coverOptions.Height)</div>
                    </div>
                    <div class="project-photo-preview-item">
                        <div class="project-photo-preview-frame" data-photo-editor-preview="md" data-width="@largeOptions.Width" data-height="@largeOptions.Height">
                            <img alt="Large preview" />
                        </div>
                        <div class="project-photo-preview-label">Large (@largeOptions.Width × @largeOptions.Height)</div>
                    </div>
                    <div class="project-photo-preview-item">
                        <div class="project-photo-preview-frame" data-photo-editor-preview="sm" data-width="@thumbOptions.Width" data-height="@thumbOptions.Height">
                            <img alt="Thumbnail preview" />
                        </div>
                        <div class="project-photo-preview-label">Thumbnail (@thumbOptions.Width × @thumbOptions.Height)</div>
                    </div>
                </div>
                <p class="text-muted small mb-0" id="project-photo-preview-helper">The selection drives the cover, large, and thumbnail previews. Keep the crop within the image bounds so each derived size stays filled.</p>
            </div>

            <input asp-for="Input.CropX" type="hidden" data-photo-editor-field="x" />
            <input asp-for="Input.CropY" type="hidden" data-photo-editor-field="y" />
            <input asp-for="Input.CropWidth" type="hidden" data-photo-editor-field="width" />
            <input asp-for="Input.CropHeight" type="hidden" data-photo-editor-field="height" />
        </div>
        <noscript>
            <style>
                .project-photo-editor { display: none !important; }
                .project-photo-editor__fallback { display: block !important; }
            </style>
        </noscript>
    </fieldset>

    <button type="submit" class="btn btn-primary">Upload</button>
    <a asp-page="./Index" asp-route-id="@Model.Project.Id" class="btn btn-link">Cancel</a>
</form>

@section Styles {
    <link rel="stylesheet" href="~/lib/cropperjs/dist/cropper.css" asp-append-version="true" />
}

@section Scripts {
    <script src="~/lib/cropperjs/dist/cropper.js" asp-append-version="true"></script>
    <script src="~/js/widgets/project-photo-gallery.js" asp-append-version="true"></script>
    <script src="~/js/projects/photo-upload.js" asp-append-version="true"></script>
}
