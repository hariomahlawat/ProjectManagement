@model ProjectManagement.ViewModels.TimelineVm
@using System.Globalization
@using ProjectManagement.Models.Execution
@{ 
    var showDirectApply = User.IsInRole("HoD");
    var canRequestChange = ViewBag?.IsProjectOfficerForProject is bool b && b;
}
@functions{
    string D(DateOnly? d) => d.HasValue ? d.Value.ToString("dd MMM yyyy", CultureInfo.CurrentCulture) : "—";
    string StatusChip(StageStatus s) =>
        s switch
        {
            StageStatus.Completed  => "badge bg-success",
            StageStatus.InProgress => "badge bg-primary",
            _                      => "badge bg-secondary"
        };
    string VarianceLabel(string name, int value)
    {
        var sign = value > 0 ? "+" : "−";
        return $"{name} {sign}{Math.Abs(value)}d";
    }
}
<link rel="stylesheet" href="~/css/projects/timeline.css" />

<div class="pm-timeline-grid">
  <div class="pm-rail" aria-hidden="true">
    <div class="pm-rail-line"></div>
  </div>
  <div class="pm-items">
    @foreach (var s in Model.Items.OrderBy(i => i.SortOrder))
    {
      var itemClass = s.Status switch
      {
        StageStatus.Completed  => "pm-item is-complete",
        StageStatus.InProgress => "pm-item is-active",
        _                      => "pm-item"
      };
      <div class="@itemClass" data-stage-row="@s.Code" data-requires-backfill="@(s.RequiresBackfill ? "true" : "false")">
        <div class="pm-item-header d-flex flex-wrap justify-content-between align-items-start gap-2">
          <div class="d-flex flex-wrap align-items-center gap-2">
            <span class="pm-item-title" data-stage-name="@s.Name">@s.Name</span>
            <span class="@StatusChip(s.Status)" data-stage-status>@s.Status</span>
            @if (s.IsAutoCompleted)
            {
              <span class="badge bg-warning-subtle text-warning border border-warning-subtle" title="Auto-completed when a later stage was completed.">inferred</span>
            }
            @{
              var showIncomplete = s.IsIncompleteData || s.RequiresBackfill;
            }
            <span class="badge bg-secondary-subtle text-body-secondary border border-secondary-subtle@(showIncomplete ? string.Empty : " d-none")" data-stage-incomplete>
              Incomplete data
            </span>
            <span data-stage-pending>
              @if (s.HasPendingRequest)
              {
                <span class="badge bg-warning-subtle text-warning border border-warning-subtle">
                  Pending: @s.PendingStatus@if (s.PendingDate.HasValue)
                  {
                    <text> · @D(s.PendingDate)</text>
                  }
                </span>
              }
            </span>
            @if (s.IsOverdue)
            {
              <span class="badge bg-danger-subtle text-danger border border-danger-subtle">Overdue</span>
            }
            <span class="ms-2 text-warning@(s.RequiresBackfill ? string.Empty : " d-none")" title="Additional data required" data-stage-backfill-indicator>⚠︎</span>
            <button type="button"
                    class="btn btn-link btn-sm px-0 align-baseline ms-1@(s.RequiresBackfill ? string.Empty : " d-none")"
                    data-action="open-backfill"
                    data-stage-backfill-button>
              Backfill…
            </button>
          </div>
          <div class="d-flex align-items-center gap-2">
            @if (canRequestChange)
            {
              <button type="button"
                      class="btn btn-sm btn-outline-primary"
                      data-stage-request
                      data-stage-request-button
                      data-project="@Model.ProjectId"
                      data-stage="@s.Code"
                      data-stage-name="@s.Name"
                      data-current-status="@s.Status"
                      @(s.HasPendingRequest ? "disabled" : null)>
                Request change
              </button>
            }
            @if (showDirectApply)
            {
              <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary pm-actions-trigger dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Actions">
                  <i class="bi bi-three-dots-vertical" aria-hidden="true"></i>
                  <span class="pm-actions-trigger-text">Actions</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                  <li>
                    <button class="dropdown-item" type="button" data-direct-apply data-project="@Model.ProjectId" data-stage="@s.Code" data-stage-name="@s.Name" data-status="InProgress" data-default-date="@s.ActualStart?.ToString("yyyy-MM-dd")">
                      Start stage
                    </button>
                  </li>
                  <li>
                    <button class="dropdown-item" type="button" data-direct-apply data-project="@Model.ProjectId" data-stage="@s.Code" data-stage-name="@s.Name" data-status="Completed" data-default-date="@s.CompletedOn?.ToString("yyyy-MM-dd")">
                      Mark completed
                    </button>
                  </li>
                  <li>
                    <button class="dropdown-item" type="button" data-direct-apply data-project="@Model.ProjectId" data-stage="@s.Code" data-stage-name="@s.Name" data-status="Blocked">
                      Block
                    </button>
                  </li>
                  <li>
                    <button class="dropdown-item" type="button" data-direct-apply data-project="@Model.ProjectId" data-stage="@s.Code" data-stage-name="@s.Name" data-status="Skipped">
                      Skip
                    </button>
                  </li>
                  <li>
                    <button class="dropdown-item" type="button" data-direct-apply data-project="@Model.ProjectId" data-stage="@s.Code" data-stage-name="@s.Name" data-status="Reopen">
                      Reopen
                    </button>
                  </li>
                </ul>
              </div>
            }
          </div>
        </div>
        <div class="pm-item-meta">
          <div>Planned: <span data-stage-planned-start>@D(s.PlannedStart)</span> — <span data-stage-planned-end>@D(s.PlannedEnd)</span></div>
          <div>
            Actual: <span data-stage-actual-start>@D(s.ActualStart)</span> — <span data-stage-completed>@D(s.CompletedOn)</span>
            <span class="text-muted ms-2@(s.ActualDurationDays.HasValue ? string.Empty : " d-none")" data-stage-duration>
              @(s.ActualDurationDays.HasValue ? $"({s.ActualDurationDays} d)" : string.Empty)
            </span>
          </div>
          <div class="pm-item-variance d-flex flex-wrap gap-1 mt-1">
            @if (s.StartVarianceDays is int startVar && startVar != 0)
            {
              <span class="badge bg-secondary-subtle text-body-secondary border border-secondary-subtle" data-stage-start-variance>@VarianceLabel("Start", startVar)</span>
            }
            @if (s.FinishVarianceDays is int finishVar && finishVar != 0)
            {
              <span class="badge bg-secondary-subtle text-body-secondary border border-secondary-subtle" data-stage-finish-variance>@VarianceLabel("Finish", finishVar)</span>
            }
          </div>
        </div>
      </div>
    }
  </div>
</div>
