@model ProjectManagement.ViewModels.TimelineVm
@using System.Globalization
@using ProjectManagement.Models.Execution
@{
    var isHod = User.IsInRole("HoD");
    var isProjectOfficer = ViewBag?.IsProjectOfficerForProject is bool b && b;
    var canRequestChange = isProjectOfficer || isHod;
}
@functions {
    string D(DateOnly? d) => d.HasValue
        ? d.Value.ToString("dd MMM yyyy", CultureInfo.CurrentCulture).Replace(' ', '\u00A0')
        : "—";

    string StatusPillClass(StageStatus s) => s switch
    {
        StageStatus.Completed  => "pm-pill pm-pill-success",
        StageStatus.InProgress => "pm-pill pm-pill-primary",
        _                      => "pm-pill pm-pill-muted"
    };

    string StatusLabel(StageStatus status) => status switch
    {
        StageStatus.Completed  => "Completed",
        StageStatus.InProgress => "In progress",
        _                      => "Not started"
    };

    (string label, string value, string description, string cssClass) VarianceToken(string name, int value)
    {
        var magnitude = Math.Abs(value);

        if (value == 0)
        {
            return (name, "on time", $"{name} on time", "pm-variance-value is-on-time");
        }

        var magnitudeText = magnitude.ToString(CultureInfo.InvariantCulture);
        var text = value > 0 ? $"+{magnitudeText}d" : $"−{magnitudeText}d";
        var description = value > 0
            ? $"{name} {magnitude} day{(magnitude == 1 ? string.Empty : "s")} later than plan."
            : $"{name} {magnitude} day{(magnitude == 1 ? string.Empty : "s")} earlier than plan.";
        var cssClass = value > 0 ? "pm-variance-value is-late" : "pm-variance-value is-early";

        return (name, text, description, cssClass);
    }
}
<link rel="stylesheet" href="~/css/projects/timeline.css" />

<div class="pm-timeline-grid">
  <div class="pm-rail" aria-hidden="true">
    <div class="pm-rail-line"></div>
  </div>
  <div class="pm-items">
    @foreach (var s in Model.Items.OrderBy(i => i.SortOrder))
    {
      var itemClass = s.Status switch
      {
        StageStatus.Completed  => "pm-item is-complete",
        StageStatus.InProgress => "pm-item is-active",
        _                      => "pm-item"
      };
      <div class="@itemClass" data-stage-row="@s.Code" data-requires-backfill="@(s.RequiresBackfill ? "true" : "false")">
        <div class="pm-item-card">
          <div class="pm-item-header">
            <div class="pm-item-heading">
              <span class="@StatusPillClass(s.Status)"
                    data-stage-status
                    data-stage-status-pill
                    aria-label="Stage status: @StatusLabel(s.Status)">
                @StatusLabel(s.Status)
              </span>
              <button type="button"
                      class="pm-pill pm-pill-warning@(s.RequiresBackfill ? string.Empty : " d-none")"
                      data-action="open-backfill"
                      data-stage-backfill-pill
                      aria-label="Backfill required for @s.Name">
                Backfill required
              </button>
              <span class="pm-item-title text-truncate"
                    title="@s.Name"
                    data-stage-name>
                @s.Name
              </span>
            </div>
            <div class="pm-item-actions">
              <div class="dropdown">
                <button class="btn pm-kebab" type="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Actions for @s.Name">
                  <i class="bi bi-three-dots-vertical" aria-hidden="true"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end" data-stage-action-menu>
                  @if (isHod && s.HasPendingRequest && s.PendingRequestId is int requestId)
                  {
                    <li>
                      <button class="dropdown-item"
                              type="button"
                              data-stage-decision-inline
                              data-stage="@s.Code"
                              data-stage-name="@s.Name"
                              data-request-id="@requestId"
                              data-decision="Approve">
                        Approve
                      </button>
                    </li>
                    <li>
                      <button class="dropdown-item"
                              type="button"
                              data-stage-decision-inline
                              data-stage="@s.Code"
                              data-stage-name="@s.Name"
                              data-request-id="@requestId"
                              data-decision="Reject">
                        Reject
                      </button>
                    </li>
                    <li><hr class="dropdown-divider" /></li>
                  }
                  @if (isHod)
                  {
                    <li class="dropdown-header">Mark as…</li>
                    <li>
                      <button class="dropdown-item"
                              type="button"
                              data-direct-apply
                              data-project="@Model.ProjectId"
                              data-stage="@s.Code"
                              data-stage-name="@s.Name"
                              data-status="InProgress"
                              data-default-date="@s.ActualStart?.ToString("yyyy-MM-dd")">
                        In progress
                      </button>
                    </li>
                    <li>
                      <button class="dropdown-item"
                              type="button"
                              data-direct-apply
                              data-project="@Model.ProjectId"
                              data-stage="@s.Code"
                              data-stage-name="@s.Name"
                              data-status="Completed"
                              data-default-date="@s.CompletedOn?.ToString("yyyy-MM-dd")">
                        Completed
                      </button>
                    </li>
                    <li>
                      <button class="dropdown-item"
                              type="button"
                              data-direct-apply
                              data-project="@Model.ProjectId"
                              data-stage="@s.Code"
                              data-stage-name="@s.Name"
                              data-status="Blocked">
                        Blocked
                      </button>
                    </li>
                    <li>
                      <button class="dropdown-item"
                              type="button"
                              data-direct-apply
                              data-project="@Model.ProjectId"
                              data-stage="@s.Code"
                              data-stage-name="@s.Name"
                              data-status="Skipped">
                        Skipped
                      </button>
                    </li>
                    <li>
                      <button class="dropdown-item"
                              type="button"
                              data-direct-apply
                              data-project="@Model.ProjectId"
                              data-stage="@s.Code"
                              data-stage-name="@s.Name"
                              data-status="Reopen">
                        Reopen
                      </button>
                    </li>
                    @if (canRequestChange)
                    {
                      <li><hr class="dropdown-divider" /></li>
                    }
                  }
                  @if (canRequestChange)
                  {
                    <li>
                      <button class="dropdown-item"
                              type="button"
                              data-stage-request
                              data-stage-request-button
                              data-project="@Model.ProjectId"
                              data-stage="@s.Code"
                              data-stage-name="@s.Name"
                              data-current-status="@s.Status"
                              @(s.HasPendingRequest ? "disabled" : null)>
                        Request change
                      </button>
                    </li>
                  }
                </ul>
              </div>
            </div>
          </div>
          <div class="pm-item-flags">
            @if (s.IsAutoCompleted)
            {
              <span class="pm-flag" title="Auto-completed when a later stage finished." data-stage-autocomplete>Inferred</span>
            }
            <span class="pm-flag@(s.IsIncompleteData || s.RequiresBackfill ? string.Empty : " d-none")" data-stage-incomplete>
              Incomplete data
            </span>
            <span class="pm-flag pm-flag-danger@(s.IsOverdue ? string.Empty : " d-none")" data-stage-overdue>Overdue</span>
            <span class="pm-flag pm-flag-warning@(s.HasPendingRequest ? string.Empty : " d-none")" data-stage-pending>
              @if (s.HasPendingRequest)
              {
                  <text>Pending: @s.PendingStatus</text>
                  @if (s.PendingDate.HasValue)
                  {
                      <text> · @D(s.PendingDate)</text>
                  }
              }
            </span>
          </div>
          <div class="pm-item-dates">
            <div class="pm-date-row">
              <span class="pm-date-label pm-date-label-muted">Planned</span>
              <div class="pm-date-values">
                <span data-stage-planned-start>@D(s.PlannedStart)</span>
                <span class="pm-date-sep">–</span>
                <span data-stage-planned-end>@D(s.PlannedEnd)</span>
              </div>
            </div>
            <div class="pm-date-row">
              <span class="pm-date-label">Actual</span>
              <div class="pm-date-values">
                <span data-stage-actual-start>@D(s.ActualStart)</span>
                <span class="pm-date-sep">–</span>
                <span data-stage-completed>@D(s.CompletedOn)</span>
                <span class="pm-date-duration@(s.ActualDurationDays.HasValue ? string.Empty : " d-none")" data-stage-duration>
                  @(s.ActualDurationDays.HasValue ? $"({s.ActualDurationDays} d)" : string.Empty)
                </span>
              </div>
            </div>
            <div class="pm-date-hint small text-muted@(s.NeedsStart || s.NeedsFinish ? string.Empty : " d-none")" data-stage-date-hint>
              @if (s.NeedsStart && s.NeedsFinish)
              {
                  <text>Actual start and finish missing</text>
              }
              else if (s.NeedsStart)
              {
                  <text>Actual start missing</text>
              }
              else if (s.NeedsFinish)
              {
                  <text>Actual finish missing</text>
              }
            </div>
          </div>
          <div class="pm-item-variance">
            <div class="pm-variance-line@(s.PlannedStart.HasValue && s.ActualStart.HasValue || s.PlannedEnd.HasValue && s.CompletedOn.HasValue ? string.Empty : " d-none")" data-stage-variance-line>
              @if (s.PlannedStart.HasValue && s.ActualStart.HasValue && s.StartVarianceDays is int startVar)
              {
                  var variance = VarianceToken("Start", startVar);
                  <span class="pm-variance-segment">
                    <span class="pm-variance-label">@variance.label</span>
                    <span class="@variance.cssClass"
                          data-stage-start-variance
                          aria-label="@variance.description"
                          title="@variance.description"
                          data-bs-toggle="tooltip"
                          data-bs-placement="top">
                      @variance.value
                    </span>
                  </span>
              }
              @if (s.PlannedStart.HasValue && s.ActualStart.HasValue && s.PlannedEnd.HasValue && s.CompletedOn.HasValue)
              {
                  <span class="pm-variance-sep" aria-hidden="true">·</span>
              }
              @if (s.PlannedEnd.HasValue && s.CompletedOn.HasValue && s.FinishVarianceDays is int finishVar)
              {
                  var variance = VarianceToken("Finish", finishVar);
                  <span class="pm-variance-segment">
                    <span class="pm-variance-label">@variance.label</span>
                    <span class="@variance.cssClass"
                          data-stage-finish-variance
                          aria-label="@variance.description"
                          title="@variance.description"
                          data-bs-toggle="tooltip"
                          data-bs-placement="top">
                      @variance.value
                    </span>
                  </span>
              }
            </div>
            <div class="pm-variance-hint small text-muted@(s.PlannedStart.HasValue || s.PlannedEnd.HasValue ? " d-none" : string.Empty)" data-stage-plan-hint>
              No plan dates
            </div>
          </div>
        </div>
      </div>
    }
  </div>
</div>
