@page
@model ProjectManagement.Pages.Tasks.IndexModel
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@{
    ViewData["Title"] = "My Tasks";
}
<nav aria-label="breadcrumb" class="mb-2">
  <ol class="breadcrumb small mb-0">
    <li class="breadcrumb-item"><a asp-page="/Dashboard/Index">Dashboard</a></li>
    <li class="breadcrumb-item active" aria-current="page">My Tasks</li>
  </ol>
</nav>

<h4 class="mb-3">My Tasks</h4>

@if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
{
  <div class="alert alert-warning py-2"><i class="bi bi-exclamation-triangle-fill me-2"></i>@err</div>
}

@if (TempData["UndoId"] is string undo && Guid.TryParse(undo, out var undoId))
{
  <form method="post" asp-page-handler="Undo" class="alert alert-success py-2 d-flex justify-content-between align-items-center">
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" value="@undoId" />
    <div><i class="bi bi-check2-circle me-2"></i>Task marked done.</div>
    <button class="btn btn-sm btn-outline-success">Undo</button>
  </form>
}

<form method="get" class="d-flex flex-wrap gap-2 align-items-center mb-3">
  <select class="form-select form-select-sm w-auto" name="tab">
    <option value="all" selected="@(Model.Tab=="all")">All</option>
    <option value="today" selected="@(Model.Tab=="today")">Today</option>
    <option value="upcoming" selected="@(Model.Tab=="upcoming")">Upcoming</option>
    <option value="completed" selected="@(Model.Tab=="completed")">Completed</option>
  </select>
  <input class="form-control form-control-sm w-auto" name="q" value="@Model.Q" placeholder="Search">
  <select class="form-select form-select-sm w-auto" name="PageSize">
    <option value="10" selected="@(Model.PageSize==10)">10</option>
    <option value="25" selected="@(Model.PageSize==25)">25</option>
    <option value="50" selected="@(Model.PageSize==50)">50</option>
  </select>
  <button class="btn btn-sm btn-primary">Apply</button>
  <a class="btn btn-sm btn-outline-secondary" asp-page="Index">Reset</a>
</form>

<form method="post" asp-page-handler="Add" class="mb-3">
  @Html.AntiForgeryToken()
  <input class="form-control form-control-sm" name="title" placeholder="Add a taskâ€¦" maxlength="160" required>
</form>

@if (Model.Tab=="completed" && Model.Groups.Length > 0 && Model.Groups[0].Items.Length > 0)
{
  <form method="post" asp-page-handler="ClearCompleted" class="mb-2">
    @Html.AntiForgeryToken()
    <button class="btn btn-sm btn-outline-danger">Clear all completed</button>
  </form>
}

<div class="mb-2">
  <button type="button" id="selectToggle" class="btn btn-sm btn-outline-secondary">Select</button>
  <form method="post" id="batchForm" class="d-inline d-none">
    @Html.AntiForgeryToken()
    <button class="btn btn-sm btn-outline-primary" formaction="?handler=BatchDone">Mark done</button>
    <button class="btn btn-sm btn-outline-danger" formaction="?handler=BatchDelete" onclick="return confirm('Delete selected tasks?');">Delete</button>
  </form>
</div>

<div id="taskListContainer">
  <partial name="_TaskList" model="Model" />
</div>

@if (Model.TotalPages > 1)
{
  <nav class="mt-2">
    <ul class="pagination pagination-sm mb-0">
      @for (var p = 1; p <= Model.TotalPages; p++)
      {
        <li class="page-item @(p==Model.Page ? "active" : "")">
          <a class="page-link" href="@Url.Page(null, new { tab = Model.Tab, q = Model.Q, page = p, pageSize = Model.PageSize })">@p</a>
        </li>
      }
    </ul>
  </nav>
}

<script>
// show actions when inputs change
document.querySelectorAll('li.todo-row').forEach(row => {
  const form = row.querySelector('form[method="post"][id^="f-"]');
  const actions = row.querySelector('.row-actions');
  if (!form || !actions) return;
  const show = () => actions.classList.remove('d-none');
  const hide = () => actions.classList.add('d-none');
  hide();
  form.addEventListener('input', show);
  form.addEventListener('reset', () => setTimeout(hide, 0));
  form.addEventListener('keydown', e => { if (e.key === 'Enter' && e.ctrlKey) { e.preventDefault(); form.submit(); } });
});

// drag reorder (Open items)
(() => {
  const lists = document.querySelectorAll('.todo-list');
  if (lists.length === 0) return;
  let dragEl;
  lists.forEach(list => {
    list.addEventListener('dragstart', e => {
      const li = e.target.closest('.todo-row'); if (!li) return;
      dragEl = li; e.dataTransfer.effectAllowed = 'move'; li.classList.add('opacity-50');
    });
    list.addEventListener('dragover', e => {
      e.preventDefault();
      const li = e.target.closest('.todo-row'); if (!li || li===dragEl) return;
      const rect = li.getBoundingClientRect();
      const before = (e.clientY - rect.top) < rect.height/2;
      li.parentNode.insertBefore(dragEl, before ? li : li.nextSibling);
    });
    list.addEventListener('dragend', async e => {
      if (dragEl) dragEl.classList.remove('opacity-50');
      const ids = Array.from(document.querySelectorAll('.todo-row')).map(r => r.dataset.id);
      const fd = new FormData(); ids.forEach(id => fd.append('ids', id));
      const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
      if (token) fd.append('__RequestVerificationToken', token);
      await fetch('?handler=Reorder', { method: 'POST', body: fd });
    });
  });
})();

// select mode toggle
const selectToggle = document.getElementById('selectToggle');
const batchForm = document.getElementById('batchForm');
selectToggle?.addEventListener('click', () => {
  const show = batchForm.classList.contains('d-none');
  batchForm.classList.toggle('d-none', !show);
  document.querySelectorAll('.select-box').forEach(cb => {
    cb.classList.toggle('d-none', !show);
    if (!show) cb.checked = false;
  });
  selectToggle.textContent = show ? 'Cancel' : 'Select';
});
</script>

