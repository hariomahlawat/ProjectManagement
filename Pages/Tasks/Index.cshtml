@page
@model ProjectManagement.Pages.Tasks.IndexModel
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@{
    ViewData["Title"] = "My Tasks";
}
<nav aria-label="breadcrumb" class="mb-2">
  <ol class="breadcrumb small mb-0">
    <li class="breadcrumb-item"><a asp-page="/Dashboard/Index">Dashboard</a></li>
    <li class="breadcrumb-item active" aria-current="page">My Tasks</li>
  </ol>
</nav>

<h4 class="mb-3">My Tasks</h4>

@if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
{
  <div class="alert alert-warning py-2"><i class="bi bi-exclamation-triangle-fill me-2"></i>@err</div>
}

<form method="get" class="row g-2 align-items-end mb-3">
  <div class="col-md-3">
    <label class="form-label small">View</label>
    <select class="form-select form-select-sm" name="tab">
      <option value="all" selected="@(Model.Tab=="all")">Open - All</option>
      <option value="today" selected="@(Model.Tab=="today")">Due today</option>
      <option value="upcoming" selected="@(Model.Tab=="upcoming")">Upcoming</option>
      <option value="completed" selected="@(Model.Tab=="completed")">Completed</option>
    </select>
  </div>
  <div class="col-md-3">
    <label class="form-label small">Search</label>
    <input class="form-control form-control-sm" name="q" value="@Model.Q" placeholder="Title or notes">
  </div>
  <div class="col-md-2">
    <label class="form-label small">Page size</label>
    <select class="form-select form-select-sm" name="PageSize">
      <option value="10" selected="@(Model.PageSize==10)">10</option>
      <option value="25" selected="@(Model.PageSize==25)">25</option>
      <option value="50" selected="@(Model.PageSize==50)">50</option>
    </select>
  </div>
  <div class="col-md-2 d-grid">
    <button class="btn btn-sm btn-primary">Apply</button>
  </div>
  <div class="col-md-2 d-grid">
    <a class="btn btn-sm btn-outline-secondary" asp-page="Index">Reset</a>
  </div>
</form>

<form method="post" asp-page-handler="Add" class="mb-3">
  @Html.AntiForgeryToken()
  <div class="input-group input-group-sm">
    <input class="form-control" name="title" placeholder="Add a taskâ€¦" maxlength="160" required>
    <button class="btn btn-primary">Add</button>
  </div>
</form>

@if (Model.Items.Length == 0)
{
  <div class="alert alert-light border text-muted">No tasks found for this view.</div>
}
else
{
  <form method="post" id="batchForm">
    @Html.AntiForgeryToken()
    <div class="mb-2">
      <button class="btn btn-sm btn-outline-primary" formaction="?handler=BatchDone" aria-label="Mark selected done">Mark done</button>
      <button class="btn btn-sm btn-outline-danger" formaction="?handler=BatchDelete" onclick="return confirm('Delete selected tasks?');" aria-label="Delete selected">Delete</button>
    </div>
  </form>
  <div class="table-responsive">
    <table class="table table-sm align-middle">
      <thead>
        <tr>
          <th style="width:24px;"></th>
          <th style="width:24px;"><input type="checkbox" id="selectAll" form="batchForm" aria-label="Select all" /></th>
          <th style="width:40px;"></th>
          <th>Title / Notes</th>
          <th style="width:140px;">Due</th>
          <th style="width:110px;">Priority</th>
          <th style="width:90px;">Pinned</th>
          <th style="width:110px;">Actions</th>
        </tr>
      </thead>
      <tbody>
      @foreach (var t in Model.Items)
      {
        var formId = $"f-{t.Id}";
        <tr draggable="@(Model.Tab=="completed" ? "false" : "true")" data-id="@t.Id" class="todo-row">
          <td class="text-muted align-middle"><i class="bi bi-grip-vertical" title="Drag to reorder (order is applied within the same due group)"></i></td>
          <td class="align-middle"><input class="form-check-input" type="checkbox" name="ids" value="@t.Id" form="batchForm" aria-label="Select task" /></td>
          <td class="align-middle">
            <form method="post" asp-page-handler="Toggle" class="m-0 p-0">
              @Html.AntiForgeryToken()
              <input type="hidden" name="id" value="@t.Id" />
              <input type="hidden" name="done" value="@(t.Status == ProjectManagement.Models.TodoStatus.Open ? "true" : "false")" />
              <input class="form-check-input" type="checkbox" title="Mark done" aria-label="Mark done" onchange="this.form.submit()" @(t.Status == ProjectManagement.Models.TodoStatus.Done ? "checked" : "") />
            </form>
          </td>
          <td class="align-middle">
            <form id="@formId" method="post" asp-page-handler="Edit" class="row g-2 m-0 p-0">
              @Html.AntiForgeryToken()
              <input type="hidden" name="id" value="@t.Id" />
              <div class="col-12">
                <input class="form-control form-control-sm" name="title" value="@t.Title" maxlength="160" aria-label="Title">
              </div>
              <div class="col-12">
                <textarea class="form-control form-control-sm" name="notes" rows="2" placeholder="Notes (optional)" aria-label="Notes">@t.Notes</textarea>
              </div>
            </form>
          </td>
          <td class="align-middle">
              <input class="form-control form-control-sm" type="date"
                     form="@formId"
                     name="dueLocal"
                     value="@(t.DueAtUtc.HasValue ? TimeZoneInfo.ConvertTime(t.DueAtUtc.Value, TimeZoneInfo.FindSystemTimeZoneById("Asia/Kolkata")).ToString("yyyy-MM-dd") : "")" />
          </td>
          <td class="align-middle">
              <select class="form-select form-select-sm" form="@formId" name="priority">
                <option value="Low" selected="@(t.Priority==ProjectManagement.Models.TodoPriority.Low)">Low</option>
                <option value="Normal" selected="@(t.Priority==ProjectManagement.Models.TodoPriority.Normal)">Normal</option>
                <option value="High" selected="@(t.Priority==ProjectManagement.Models.TodoPriority.High)">High</option>
              </select>
          </td>
          <td class="align-middle text-center">
              <input class="form-check-input" form="@formId" type="checkbox" name="pin" value="true" @(t.IsPinned ? "checked" : "") />
          </td>
          <td class="align-middle text-end">
              <button form="@formId" class="btn btn-sm btn-outline-primary">Save</button>
              <button type="reset" form="@formId" class="btn btn-sm btn-outline-secondary">Cancel</button>
              <form method="post" asp-page-handler="Delete" class="d-inline" onsubmit="return confirm('Delete this task?');">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" value="@t.Id" />
                <button class="btn btn-sm btn-outline-danger">Delete</button>
              </form>
          </td>
        </tr>
      }
      </tbody>
    </table>
  </div>
  @if (Model.TotalPages > 1)
  {
    <nav class="mt-2">
      <ul class="pagination pagination-sm mb-0">
        @for (var p = 1; p <= Model.TotalPages; p++)
        {
          <li class="page-item @(p==Model.Page ? "active" : "")">
            <a class="page-link" href="@Url.Page(null, new { tab = Model.Tab, q = Model.Q, page = p, pageSize = Model.PageSize })">@p</a>
          </li>
        }
      </ul>
    </nav>
  }
}

<script>
(function(){
  const tbody = document.querySelector("table tbody");
  if (!tbody) return;
  let dragEl;

  tbody.addEventListener("dragstart", e => {
    const row = e.target.closest(".todo-row");
    if (!row) return;
    dragEl = row;
    e.dataTransfer.effectAllowed = "move";
    row.classList.add("opacity-50");
  });

  tbody.addEventListener("dragover", e => {
    e.preventDefault();
    const row = e.target.closest(".todo-row");
    if (!row || row === dragEl) return;
    const rect = row.getBoundingClientRect();
    const before = (e.clientY - rect.top) < rect.height / 2;
    row.parentNode.insertBefore(dragEl, before ? row : row.nextSibling);
  });

  tbody.addEventListener("dragend", async e => {
    if (dragEl) dragEl.classList.remove("opacity-50");
    const ids = Array.from(tbody.querySelectorAll(".todo-row")).map(r => r.dataset.id);
    if (ids.length === 0) return;

    const formData = new FormData();
    ids.forEach(id => formData.append("ids", id));
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
    formData.append("__RequestVerificationToken", token);

    await fetch("?handler=Reorder", { method: "POST", body: formData });
  });
  const selectAll = document.getElementById("selectAll");
  if (selectAll) {
    selectAll.addEventListener("change", e => {
      document.querySelectorAll("input[name='ids']").forEach(cb => cb.checked = selectAll.checked);
    });
  }
})();
</script>

